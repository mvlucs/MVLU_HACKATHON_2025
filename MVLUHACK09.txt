Music Code : 
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Smooth Breathing Exercise</title>
<style>
  :root{
    --primary:#4a6fa5;--secondary:#166088;--accent:#4cb1a7;--dark:#1e2a3a;--light:#f5f7fa;
    --success:#4caf50;--warning:#ff9800;--error:#f44336;
  }
  *{margin:0;padding:0;box-sizing:border-box;font-family:'Segoe UI',Tahoma,Geneva,Verdana,sans-serif;}
  body{background:linear-gradient(135deg,var(--dark),#0f1721);color:var(--light);min-height:100vh;padding:20px;display:flex;justify-content:center;align-items:center;}
  .container{max-width:800px;width:100%;background:rgba(255,255,255,0.05);border-radius:20px;padding:30px;box-shadow:0 10px 30px rgba(0,0,0,0.3);}
  header{text-align:center;margin-bottom:30px;}
  h1{font-size:2.5rem;margin-bottom:10px;color:var(--accent);}
  .subtitle{color:#a0aec0;font-size:1.1rem;}
  .visualization{display:flex;flex-direction:column;align-items:center;margin:30px 0;}
  .breath-container{position:relative;width:250px;height:250px;margin:20px 0;}
  #breathCircle{width:100%;height:100%;border-radius:50%;background:radial-gradient(circle,var(--primary),var(--secondary));box-shadow:0 0 30px rgba(76,177,167,0.3);transition:transform .8s ease-in-out;transform:scale(1)}
  .phase-display{text-align:center;margin-top:20px;}
  #phaseLabel{font-size:1.8rem;font-weight:700;color:var(--accent);margin-bottom:5px;}
  #timeLabel{font-size:1.2rem;color:#cbd5e0;}
  .progress-bar{width:100%;height:8px;background:rgba(255,255,255,0.1);border-radius:4px;overflow:hidden;margin-top:15px;}
  #phaseProgress{height:100%;width:0%;background:var(--accent);border-radius:4px;transition:width .1s linear;}
  .controls{display:grid;grid-template-columns:repeat(2,1fr);gap:20px;margin-top:30px;}
  @media (max-width:768px){.controls{grid-template-columns:1fr}}
  .control-group{display:flex;flex-direction:column;gap:8px;}
  label{font-weight:500;color:#cbd5e0;}
  input[type="range"]{width:100%;height:8px;-webkit-appearance:none;appearance:none;background:rgba(255,255,255,0.1);border-radius:4px;outline:none;}
  input[type="range"]::-webkit-slider-thumb{-webkit-appearance:none;appearance:none;width:20px;height:20px;border-radius:50%;background:var(--accent);cursor:pointer;}
  .value-display{font-size:.9rem;color:#a0aec0;text-align:right;}
  .button-group{display:flex;gap:15px;margin-top:20px;}
  button{padding:12px 20px;border:none;border-radius:8px;font-weight:600;cursor:pointer;transition:all .2s ease;flex:1;display:flex;align-items:center;justify-content:center;gap:8px;}
  button:disabled{opacity:.6;cursor:not-allowed;}
  #startBtn{background:var(--success);color:white;}
  #stopBtn{background:var(--error);color:white;}
  #pauseBtn{background:var(--warning);color:white;}
  .session-info{display:flex;justify-content:space-between;margin-top:30px;padding-top:20px;border-top:1px solid rgba(255,255,255,0.1);}
  .stat{text-align:center;}
  .stat-value{font-size:1.5rem;font-weight:700;color:var(--accent);}
  .stat-label{font-size:.8rem;color:#a0aec0;}
  .notification{position:fixed;top:20px;right:20px;padding:15px 20px;border-radius:8px;color:white;font-weight:500;transform:translateX(100%);opacity:0;transition:all .3s ease;z-index:1000;box-shadow:0 4px 12px rgba(0,0,0,0.15)}
  .notification.show{transform:translateX(0);opacity:1}
  .notification.success{background:var(--success)}
  .notification.error{background:var(--error)}
  .notification.warning{background:var(--warning)}
  .presets{display:flex;gap:10px;margin-top:20px;flex-wrap:wrap;justify-content:center;}
  .preset-btn{padding:8px 15px;background:rgba(255,255,255,0.1);border:1px solid rgba(255,255,255,0.2);border-radius:20px;color:#cbd5e0;font-size:.9rem;cursor:pointer;transition:all .2s ease;}
  .preset-btn:hover{background:rgba(255,255,255,0.2)}
  .preset-btn.active{background:var(--accent);color:white;border-color:var(--accent)}
  
  /* New styles for breath indicators */
  .breath-instruction {
    margin-top: 15px;
    font-size: 1.2rem;
    font-weight: 600;
    text-align: center;
    min-height: 30px;
    color: var(--accent);
    transition: opacity 0.5s ease;
  }
  
  .breath-arrow {
    font-size: 2rem;
    margin: 10px 0;
    transition: opacity 0.5s ease;
  }
  
  .bowl-sound-container {
    margin-top: 15px;
    text-align: center;
  }
  
  .bowl-icon {
    font-size: 2rem;
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.1); }
    100% { transform: scale(1); }
  }
</style>
</head>
<body>
  <div class="container">
    <header>
      <h1>Calm Breathing Exercise</h1>
      <p class="subtitle">Relax and focus with smooth breathing patterns</p>
    </header>

    <div class="visualization">
      <div class="breath-container"><div id="breathCircle"></div></div>
      
      <!-- New breath instruction elements -->
      <div class="breath-arrow" id="breathArrow">↑</div>
      <div class="breath-instruction" id="breathInstruction">Breathe In</div>
      
      <div class="phase-display">
        <div id="phaseLabel">Ready</div>
        <div id="timeLabel">Press Start</div>
      </div>
      <div class="progress-bar"><div id="phaseProgress"></div></div>
      
      <!-- Bowl sound indicator -->
      <div class="bowl-sound-container">
        <div class="bowl-icon">🪘</div>
        <div>Bowl Sound Enabled</div>
      </div>
    </div>

    <div class="controls">
      <div class="control-group">
        <label for="cycleDuration">Cycle Duration (seconds)</label>
        <input type="range" id="cycleDuration" min="4" max="30" step="1" value="12">
        <div class="value-display"><span id="cycleDurationValue">12</span> seconds</div>
      </div>

      <div class="control-group">
        <label for="inhaleRatio">Inhale Ratio</label>
        <input type="range" id="inhaleRatio" min="0.1" max="0.9" step="0.05" value="0.4">
        <div class="value-display"><span id="inhaleRatioValue">40</span>% of cycle</div>
      </div>

      <div class="control-group">
        <label for="volume">Volume</label>
        <input type="range" id="volume" min="0" max="1" step="0.05" value="0.7">
        <div class="value-display"><span id="volumeValue">70</span>%</div>
      </div>

      <div class="control-group">
        <label for="pitch">Tone Depth</label>
        <input type="range" id="pitch" min="0.5" max="2" step="0.1" value="1">
        <div class="value-display"><span id="pitchValue">1.0</span></div>
      </div>
    </div>

    <div class="presets">
      <div class="preset-btn active" data-preset="relax">Relaxation</div>
      <div class="preset-btn" data-preset="focus">Focus</div>
      <div class="preset-btn" data-preset="sleep">Sleep</div>
      <div class="preset-btn" data-preset="energy">Energy</div>
    </div>

    <div class="button-group">
      <button id="startBtn" title="Start session">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="20" height="20">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"/>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
        </svg>
        Start
      </button>

      <button id="pauseBtn" disabled data-paused="false" title="Pause session">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="20" height="20">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
        </svg>
        Pause
      </button>

      <button id="stopBtn" disabled title="Stop session">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="20" height="20">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 10a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4z"/>
        </svg>
        Stop
      </button>
    </div>

    <div class="session-info">
      <div class="stat"><div class="stat-value" id="statCycles">0</div><div class="stat-label">Cycles</div></div>
      <div class="stat"><div class="stat-value" id="statDuration">0m</div><div class="stat-label">Duration</div></div>
      <div class="stat"><div class="stat-value" id="audioState">Inactive</div><div class="stat-label">Audio State</div></div>
    </div>
  </div>

  <div id="notification" class="notification"></div>

<script>
  // DOM refs
  const startBtn = document.getElementById('startBtn');
  const stopBtn = document.getElementById('stopBtn');
  const pauseBtn = document.getElementById('pauseBtn');
  const phaseLabel = document.getElementById('phaseLabel');
  const timeLabel = document.getElementById('timeLabel');
  const phaseProgress = document.getElementById('phaseProgress');
  const breathCircle = document.getElementById('breathCircle');
  const notification = document.getElementById('notification');
  const statCycles = document.getElementById('statCycles');
  const statDuration = document.getElementById('statDuration');
  const audioStateEl = document.getElementById('audioState');
  const breathInstruction = document.getElementById('breathInstruction');
  const breathArrow = document.getElementById('breathArrow');

  const cycleDurationSlider = document.getElementById('cycleDuration');
  const inhaleRatioSlider = document.getElementById('inhaleRatio');
  const volumeSlider = document.getElementById('volume');
  const pitchSlider = document.getElementById('pitch');

  const cycleDurationValue = document.getElementById('cycleDurationValue');
  const inhaleRatioValue = document.getElementById('inhaleRatioValue');
  const volumeValue = document.getElementById('volumeValue');
  const pitchValue = document.getElementById('pitchValue');

  const presetButtons = document.querySelectorAll('.preset-btn');

  // Audio + session state
  let audioCtx, bowlSoundBuffer, bowlSource, bowlGain;
  let running = false, paused = false;
  let cycleDuration = 12, inhaleRatio = 0.4;
  let cycleCount = 0, sessionSeconds = 0;
  let currentVolume = 0.7, currentPitch = 1.0;
  let currentPhase = "ready";
  let phaseStartTime = 0;
  let phaseDuration = 0;
  let cycleTimer = null, sessionTimer = null;
  let remainingPhaseSeconds = null;
  let progressRAF = null;
  let audioLoopInterval = null;

  // ---- UI init ----
  function initUI(){
    updateSliderValues();

    cycleDurationSlider.addEventListener('input', ()=> {
      cycleDurationValue.textContent = cycleDurationSlider.value;
      if(running && !paused) cycleDuration = parseInt(cycleDurationSlider.value);
    });

    inhaleRatioSlider.addEventListener('input', ()=> {
      inhaleRatioValue.textContent = Math.round(inhaleRatioSlider.value * 100);
      if(running && !paused) inhaleRatio = parseFloat(inhaleRatioSlider.value);
    });

    volumeSlider.addEventListener('input', ()=> {
      volumeValue.textContent = Math.round(volumeSlider.value * 100);
      currentVolume = parseFloat(volumeSlider.value);
      updateAudioParameters();
    });

    pitchSlider.addEventListener('input', ()=> {
      pitchValue.textContent = parseFloat(pitchSlider.value).toFixed(1);
      currentPitch = parseFloat(pitchSlider.value);
      updateAudioParameters();
    });

    startBtn.addEventListener('click', startSession);
    pauseBtn.addEventListener('click', togglePause);
    stopBtn.addEventListener('click', stopSession);

    presetButtons.forEach(btn => {
      btn.addEventListener('click', function(){
        presetButtons.forEach(b=>b.classList.remove('active'));
        this.classList.add('active');
        applyPreset(this.dataset.preset);
      });
    });
  }

  function updateSliderValues(){
    cycleDurationValue.textContent = cycleDurationSlider.value;
    inhaleRatioValue.textContent = Math.round(inhaleRatioSlider.value * 100);
    volumeValue.textContent = Math.round(volumeSlider.value * 100);
    pitchValue.textContent = parseFloat(pitchSlider.value).toFixed(1);
  }

  function applyPreset(preset){
    switch(preset){
      case 'relax': cycleDurationSlider.value = 12; inhaleRatioSlider.value = 0.4; volumeSlider.value = 0.7; pitchSlider.value = 1.0; break;
      case 'focus': cycleDurationSlider.value = 10; inhaleRatioSlider.value = 0.5; volumeSlider.value = 0.6; pitchSlider.value = 1.2; break;
      case 'sleep': cycleDurationSlider.value = 16; inhaleRatioSlider.value = 0.35; volumeSlider.value = 0.5; pitchSlider.value = 0.8; break;
      case 'energy': cycleDurationSlider.value = 8; inhaleRatioSlider.value = 0.6; volumeSlider.value = 0.8; pitchSlider.value = 1.5; break;
    }
    updateSliderValues();
    cycleDuration = parseInt(cycleDurationSlider.value);
    inhaleRatio = parseFloat(inhaleRatioSlider.value);
    currentVolume = parseFloat(volumeSlider.value);
    currentPitch = parseFloat(pitchSlider.value);
    updateAudioParameters();
    showNotification(`Applied ${preset} preset`,"success");
  }

  // ---- Audio ----
  function initAudio(){
    if(audioCtx) return true;
    try{
      audioCtx = new (window.AudioContext || window.webkitAudioContext)();
      generateBowlSound();
      audioStateEl.textContent = audioCtx.state;
      return true;
    }catch(e){
      console.error("Audio init failed:", e);
      showNotification("Audio initialization failed. Check browser support.","error");
      return false;
    }
  }

  function generateBowlSound() {
    // Create a bell/bowl-like sound using Web Audio API
    const duration = 4; // seconds
    const sampleRate = audioCtx.sampleRate;
    const frameCount = duration * sampleRate;
    
    bowlSoundBuffer = audioCtx.createBuffer(1, frameCount, sampleRate);
    const channelData = bowlSoundBuffer.getChannelData(0);
    
    // Generate a harmonic-rich decaying tone (like a meditation bowl)
    const baseFreq = 110; // A2 note
    for (let i = 0; i < frameCount; i++) {
      const time = i / sampleRate;
      // Fundamental frequency with harmonics
      let sample = 0.6 * Math.sin(2 * Math.PI * baseFreq * time);
      sample += 0.3 * Math.sin(2 * Math.PI * baseFreq * 2 * time);
      sample += 0.2 * Math.sin(2 * Math.PI * baseFreq * 3 * time);
      sample += 0.1 * Math.sin(2 * Math.PI * baseFreq * 4 * time);
      
      // Apply exponential decay
      sample *= Math.exp(-time * 1.5);
      
      // Apply gentle amplitude modulation
      sample *= (0.95 + 0.05 * Math.sin(2 * Math.PI * 2 * time));
      
      channelData[i] = sample;
    }
    
    bowlGain = audioCtx.createGain();
    bowlGain.gain.value = 0;
    bowlGain.connect(audioCtx.destination);
  }

  function playBowlSound() {
    if (!bowlSoundBuffer) return;
    
    // Stop any existing sound
    if (bowlSource) {
      bowlSource.stop();
    }
    
    // Create and play the bowl sound
    bowlSource = audioCtx.createBufferSource();
    bowlSource.buffer = bowlSoundBuffer;
    bowlSource.connect(bowlGain);
    
    // Adjust playback rate based on pitch setting
    bowlSource.playbackRate.value = currentPitch;
    
    bowlSource.start();
    bowlSource.onended = () => {
      // Fade out gently when sound completes
      bowlGain.gain.exponentialRampToValueAtTime(0.001, audioCtx.currentTime + 0.5);
    };
  }

  function startAudioLoop() {
    // Clear any existing loop
    if (audioLoopInterval) {
      clearInterval(audioLoopInterval);
      audioLoopInterval = null;
    }
    
    // Play sound immediately
    playBowlSound();
    
    // Calculate interval based on cycle duration
    const interval = cycleDuration * 1000; // Convert to milliseconds
    
    // Set up the loop
    audioLoopInterval = setInterval(() => {
      if (running && !paused) {
        playBowlSound();
      }
    }, interval);
  }

  function stopAudioLoop() {
    if (audioLoopInterval) {
      clearInterval(audioLoopInterval);
      audioLoopInterval = null;
    }
    
    // Fade out any currently playing sound
    if (bowlGain) {
      bowlGain.gain.exponentialRampToValueAtTime(0.001, audioCtx.currentTime + 0.5);
    }
  }

  function updateAudioParameters(){
    if(!bowlGain) return;
    bowlGain.gain.value = currentVolume * 0.5;
  }

  // ---- Notifications ----
  function showNotification(message, type='success'){
    notification.textContent = message;
    notification.className = `notification ${type} show`;
    setTimeout(()=> notification.classList.remove('show'), 3000);
  }

  // ---- Session control ----
  function startSession(){
    if(!initAudio()) return;
    audioCtx.resume().then(()=>{
      audioStateEl.textContent = 'running';
      running = true; paused = false;
      cycleCount = 0; sessionSeconds = 0;
      statCycles.textContent = cycleCount;
      statDuration.textContent = '0m';

      startBtn.disabled = true;
      stopBtn.disabled = false;
      pauseBtn.disabled = false;
      pauseBtn.setAttribute('data-paused','false');
      pauseBtn.title = 'Pause session';

      cycleDuration = parseInt(cycleDurationSlider.value);
      inhaleRatio = parseFloat(inhaleRatioSlider.value);
      currentVolume = parseFloat(volumeSlider.value);
      currentPitch = parseFloat(pitchSlider.value);
      updateAudioParameters();

      // Start audio loop
      startAudioLoop();

      // session timer
      if(sessionTimer) clearInterval(sessionTimer);
      sessionTimer = setInterval(()=>{
        sessionSeconds++;
        statDuration.textContent = `${Math.floor(sessionSeconds/60)}m ${sessionSeconds%60}s`;
      },1000);

      // Start with inhale
      nextPhase('inhale');
      showNotification('Session started','success');
    });
  }

  function stopSession(){
    running = false; paused = false;
    if(cycleTimer) { clearTimeout(cycleTimer); cycleTimer = null; }
    if(sessionTimer) { clearInterval(sessionTimer); sessionTimer = null; }
    if(progressRAF) { cancelAnimationFrame(progressRAF); progressRAF = null; }
    
    // Stop audio loop
    stopAudioLoop();

    phaseLabel.textContent = 'Ready';
    timeLabel.textContent = 'Press Start';
    phaseProgress.style.width = '0%';
    breathCircle.style.transform = 'scale(1)';
    
    // Reset breath instructions
    breathInstruction.textContent = '';
    breathArrow.textContent = '';
    breathArrow.style.opacity = '0';

    startBtn.disabled = false;
    stopBtn.disabled = true;
    pauseBtn.disabled = true;
    pauseBtn.setAttribute('data-paused','false');
    pauseBtn.title = 'Pause session';

    if(bowlGain) bowlGain.gain.value = 0;
    audioStateEl.textContent = 'Inactive';

    showNotification('Session stopped','warning');
  }

  function togglePause(){
    if(!running) return;
    if(!paused){
      // Pausing
      paused = true;
      // stop timers and animation
      if(cycleTimer){ clearTimeout(cycleTimer); cycleTimer = null; }
      if(progressRAF){ cancelAnimationFrame(progressRAF); progressRAF = null; }
      
      // Stop audio loop
      stopAudioLoop();

      // compute remaining time in current phase
      const elapsed = (Date.now() - phaseStartTime) / 1000;
      remainingPhaseSeconds = Math.max(0, phaseDuration - elapsed);

      // mute audio
      if(bowlGain) bowlGain.gain.value = 0;

      audioStateEl.textContent = 'Paused';
      pauseBtn.setAttribute('data-paused','true');
      pauseBtn.title = 'Resume session';
      showNotification('Session paused','warning');
    } else {
      // Resuming
      paused = false;
      audioStateEl.textContent = 'running';
      updateAudioParameters();
      
      // Restart audio loop
      startAudioLoop();

      // If nothing left, advance immediately
      if(remainingPhaseSeconds <= 0){
        // move to next phase
        if(currentPhase === 'inhale') nextPhase('exhale'); else nextPhase('inhale');
        remainingPhaseSeconds = null;
      } else {
        // resume current phase for remainingPhaseSeconds
        phaseStartTime = Date.now();
        phaseDuration = remainingPhaseSeconds;
        startProgressAnimation(phaseDuration);
        cycleTimer = setTimeout(()=> {
          if(currentPhase === 'inhale') nextPhase('exhale'); else nextPhase('inhale');
        }, remainingPhaseSeconds * 1000);
        remainingPhaseSeconds = null;
      }

      pauseBtn.setAttribute('data-paused','false');
      pauseBtn.title = 'Pause session';
      showNotification('Session resumed','success');
    }
  }

  function nextPhase(phase){
    if(!running) return;
    // ensure any existing timer/animation cleared
    if(cycleTimer){ clearTimeout(cycleTimer); cycleTimer = null; }
    if(progressRAF){ cancelAnimationFrame(progressRAF); progressRAF = null; }

    currentPhase = phase;
    phaseStartTime = Date.now();

    let duration;
    if(phase === 'inhale'){
      duration = cycleDuration * inhaleRatio;
      phaseLabel.textContent = 'Breathe In';
      breathCircle.style.transform = 'scale(1.5)';
      
      // Update breath instructions
      breathInstruction.textContent = 'Breathe In';
      breathArrow.textContent = '↑';
      breathArrow.style.opacity = '1';
      
      // Set volume for inhale
      if(bowlGain) bowlGain.gain.setValueAtTime(currentVolume * 0.5, audioCtx.currentTime);
      
    } else {
      duration = cycleDuration * (1 - inhaleRatio);
      phaseLabel.textContent = 'Breathe Out';
      breathCircle.style.transform = 'scale(1)';
      
      // Update breath instructions
      breathInstruction.textContent = 'Breathe Out';
      breathArrow.textContent = '↓';
      breathArrow.style.opacity = '1';
      
      // Set volume for exhale
      if(bowlGain) bowlGain.gain.setValueAtTime(currentVolume * 0.3, audioCtx.currentTime);
      
      // increment cycle count when exhale begins (one inhale+exhale completed)
      cycleCount++;
      statCycles.textContent = cycleCount;
    }

    phaseDuration = duration;
    timeLabel.textContent = `${duration.toFixed(1)} seconds`;

    // start progress animation and set timer for next phase
    startProgressAnimation(duration);

    cycleTimer = setTimeout(()=>{
      if(phase === 'inhale') nextPhase('exhale'); else nextPhase('inhale');
    }, duration * 1000);
  }

  // Smooth progress animation using requestAnimationFrame
  function startProgressAnimation(totalSeconds){
    const start = Date.now();
    function step(){
      if(!running || paused) return;
      const elapsed = (Date.now() - start) / 1000;
      const pct = Math.min(1, elapsed / totalSeconds);
      phaseProgress.style.width = `${(pct * 100).toFixed(2)}%`;
      // update time remaining display (optional)
      const remaining = Math.max(0, totalSeconds - elapsed);
      timeLabel.textContent = `${remaining.toFixed(1)} seconds`;
      if(pct < 1){
        progressRAF = requestAnimationFrame(step);
      } else {
        progressRAF = null;
      }
    }
    // ensure progress starts from 0 for the new phase
    phaseProgress.style.width = '0%';
    progressRAF = requestAnimationFrame(step);
  }

  // Init on DOM loaded
  document.addEventListener('DOMContentLoaded', initUI);
</script>
</body>
</html>










































Note Maker : 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Smart Notes Generator</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
            color: #333;
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 0;
            margin-bottom: 30px;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .logo i {
            font-size: 2.5rem;
            color: white;
        }

        .logo h1 {
            color: white;
            font-size: 2.5rem;
            font-weight: 700;
        }

        .main-content {
            display: flex;
            gap: 30px;
        }

        @media (max-width: 900px) {
            .main-content {
                flex-direction: column;
            }
        }

        .input-section {
            flex: 1;
            background: white;
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        }

        .output-section {
            flex: 1;
            background: white;
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
            display: flex;
            flex-direction: column;
        }

        .section-title {
            font-size: 1.5rem;
            color: #6a11cb;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #f0f0f0;
        }

        .input-methods {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
        }

        .input-tab {
            padding: 10px 20px;
            background: #f0f5ff;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .input-tab.active {
            background: #6a11cb;
            color: white;
        }

        textarea {
            width: 100%;
            height: 200px;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 10px;
            resize: vertical;
            font-size: 1rem;
            line-height: 1.5;
            margin-bottom: 20px;
            transition: border-color 0.3s;
        }

        textarea:focus {
            outline: none;
            border-color: #6a11cb;
            box-shadow: 0 0 0 2px rgba(106, 17, 203, 0.2);
        }

        .upload-area {
            border: 2px dashed #6a11cb;
            border-radius: 10px;
            padding: 30px;
            text-align: center;
            margin-bottom: 20px;
            background: #f9f9ff;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .upload-area.highlight {
            background: #f0f5ff;
            border-color: #2575fc;
        }

        .upload-area i {
            font-size: 3rem;
            color: #6a11cb;
            margin-bottom: 15px;
        }

        .upload-area p {
            color: #666;
            margin-bottom: 15px;
        }

        .upload-btn {
            background: #6a11cb;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .upload-btn:hover {
            background: #5a0fb8;
        }

        .file-info {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 12px 15px;
            background: #f0f5ff;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .file-info i {
            color: #6a11cb;
            font-size: 1.5rem;
        }

        .file-details {
            flex: 1;
        }

        .file-name {
            font-weight: 600;
            margin-bottom: 5px;
        }

        .file-size {
            color: #666;
            font-size: 0.9rem;
        }

        .remove-btn {
            color: #ff6b6b;
            cursor: pointer;
            font-size: 1.2rem;
        }

        .generate-btn {
            background: #6a11cb;
            color: white;
            border: none;
            padding: 15px 25px;
            border-radius: 10px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            transition: all 0.3s ease;
            width: 100%;
        }

        .generate-btn:hover {
            background: #5a0fb8;
            transform: translateY(-2px);
        }

        .generate-btn:active {
            transform: translateY(0);
        }

        .notes-list {
            flex: 1;
            overflow-y: auto;
            margin-bottom: 20px;
            max-height: 400px;
        }

        .note-item {
            background: #f9f9ff;
            padding: 15px;
            margin-bottom: 15px;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            border-left: 4px solid #6a11cb;
            display: flex;
            align-items: flex-start;
            gap: 10px;
        }

        .note-item i {
            color: #6a11cb;
            margin-top: 4px;
            flex-shrink: 0;
        }

        .note-text {
            font-size: 1rem;
            line-height: 1.5;
            color: #333;
        }

        .empty-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 200px;
            color: #888;
            text-align: center;
        }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 15px;
            color: #d0d0d0;
        }

        .action-buttons {
            display: flex;
            gap: 15px;
        }

        .action-btn {
            flex: 1;
            padding: 12px 20px;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            transition: all 0.3s ease;
        }

        .copy-btn {
            background: #2575fc;
            color: white;
            border: none;
        }

        .copy-btn:hover {
            background: #1c64e0;
        }

        .download-btn {
            background: #f0f0f0;
            color: #555;
            border: none;
        }

        .download-btn:hover {
            background: #e0e0e0;
        }

        .notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: #4caf50;
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            display: flex;
            align-items: center;
            gap: 10px;
            transform: translateY(100px);
            opacity: 0;
            transition: all 0.3s ease;
            z-index: 1000;
        }

        .notification.show {
            transform: translateY(0);
            opacity: 1;
        }

        .notification.error {
            background: #ff6b6b;
        }

        .ai-badge {
            display: inline-block;
            background: linear-gradient(135deg, #ff6b6b 0%, #ff8e53 100%);
            color: white;
            padding: 4px 10px;
            border-radius: 50px;
            font-size: 0.8rem;
            font-weight: 600;
            margin-left: 10px;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="logo">
                <i class="fas fa-brain"></i>
                <h1>AI Smart Notes <span class="ai-badge">AI Powered</span></h1>
            </div>
        </header>

        <div class="main-content">
            <div class="input-section">
                <h2 class="section-title">Input Content</h2>
                
                <div class="input-methods">
                    <div class="input-tab active" id="textTab">Text Input</div>
                    <div class="input-tab" id="fileTab">Upload File</div>
                </div>
                
                <div id="textInputArea">
                    <textarea id="contentInput" placeholder="Enter your content or topic here..."></textarea>
                    <div class="action-buttons">
                        <button class="action-btn download-btn" onclick="pasteContent()">
                            <i class="fas fa-paste"></i> Paste Text
                        </button>
                        <button class="action-btn download-btn" onclick="clearContent()">
                            <i class="fas fa-trash"></i> Clear
                        </button>
                    </div>
                </div>
                
                <div id="fileInputArea" style="display: none;">
                    <div class="upload-area" id="dropZone">
                        <i class="fas fa-file-upload"></i>
                        <p>Drag & drop your file here or click to browse</p>
                        <input type="file" id="fileUpload" accept=".pdf,.docx,.txt" style="display: none;">
                        <button class="upload-btn" onclick="document.getElementById('fileUpload').click()">Browse Files</button>
                    </div>
                    
                    <div id="fileInfo" style="display: none;">
                        <div class="file-info">
                            <i class="fas fa-file-pdf" id="fileIcon"></i>
                            <div class="file-details">
                                <div class="file-name" id="fileName">document.pdf</div>
                                <div class="file-size" id="fileSize">2.4 MB</div>
                            </div>
                            <div class="remove-btn" onclick="removeFile()">
                                <i class="fas fa-times"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <button class="generate-btn" id="generateBtn" onclick="generateNotes()">
                    <i class="fas fa-magic"></i> Generate Smart Notes
                </button>
            </div>
            
            <div class="output-section">
                <h2 class="section-title">Generated Notes</h2>
                
                <div class="notes-list" id="notesOutput">
                    <div class="empty-state">
                        <i class="fas fa-lightbulb"></i>
                        <p>Your AI-generated notes will appear here</p>
                    </div>
                </div>
                
                <div class="action-buttons">
                    <button class="action-btn copy-btn" onclick="copyNotes()">
                        <i class="fas fa-copy"></i> Copy All Notes
                    </button>
                    <button class="action-btn download-btn" onclick="saveNotes()">
                        <i class="fas fa-download"></i> Download Notes
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <div class="notification" id="notification">
        <i class="fas fa-check-circle" id="notificationIcon"></i>
        <span id="notificationText"></span>
    </div>

    <script>
        // DOM Elements
        const textTab = document.getElementById('textTab');
        const fileTab = document.getElementById('fileTab');
        const textInputArea = document.getElementById('textInputArea');
        const fileInputArea = document.getElementById('fileInputArea');
        const dropZone = document.getElementById('dropZone');
        const fileUpload = document.getElementById('fileUpload');
        const fileInfo = document.getElementById('fileInfo');
        const notesOutput = document.getElementById('notesOutput');
        const generateBtn = document.getElementById('generateBtn');
        const notification = document.getElementById('notification');
        const notificationIcon = document.getElementById('notificationIcon');
        const notificationText = document.getElementById('notificationText');
        
        // Current state
        let currentFile = null;
        let generatedNotes = [];
        
        // Set up tab switching
        textTab.addEventListener('click', () => {
            textTab.classList.add('active');
            fileTab.classList.remove('active');
            textInputArea.style.display = 'block';
            fileInputArea.style.display = 'none';
        });
        
        fileTab.addEventListener('click', () => {
            fileTab.classList.add('active');
            textTab.classList.remove('active');
            fileInputArea.style.display = 'block';
            textInputArea.style.display = 'none';
        });
        
        // Set up file upload
        fileUpload.addEventListener('change', handleFileUpload);
        
        // Set up drag and drop
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, preventDefaults, false);
        });
        
        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }
        
        ['dragenter', 'dragover'].forEach(eventName => {
            dropZone.addEventListener(eventName, highlight, false);
        });
        
        ['dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, unhighlight, false);
        });
        
        function highlight() {
            dropZone.classList.add('highlight');
        }
        
        function unhighlight() {
            dropZone.classList.remove('highlight');
        }
        
        dropZone.addEventListener('drop', handleDrop, false);
        
        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            if (files.length) {
                handleFile(files[0]);
            }
        }
        
        // Handle file selection
        function handleFileUpload(e) {
            if (e.target.files.length) {
                handleFile(e.target.files[0]);
            }
        }
        
        function handleFile(file) {
            const validTypes = ['application/pdf', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'text/plain'];
            
            if (!validTypes.includes(file.type)) {
                showNotification('Please upload a PDF, DOCX, or TXT file', true);
                return;
            }
            
            if (file.size > 10 * 1024 * 1024) {
                showNotification('File size must be less than 10MB', true);
                return;
            }
            
            // Store the file
            currentFile = file;
            
            // Display file info
            document.getElementById('fileName').textContent = file.name;
            document.getElementById('fileSize').textContent = formatFileSize(file.size);
            
            // Set appropriate icon
            const fileIcon = document.getElementById('fileIcon');
            if (file.type === 'application/pdf') {
                fileIcon.className = 'fas fa-file-pdf';
            } else if (file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
                fileIcon.className = 'fas fa-file-word';
            } else {
                fileIcon.className = 'fas fa-file-alt';
            }
            
            fileInfo.style.display = 'block';
            
            showNotification('File uploaded successfully');
        }
        
        function removeFile() {
            fileUpload.value = '';
            fileInfo.style.display = 'none';
            currentFile = null;
        }
        
        function formatFileSize(bytes) {
            if (bytes < 1024) return bytes + ' bytes';
            else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';
            else return (bytes / 1048576).toFixed(1) + ' MB';
        }
        
        // Function to generate notes (simulates AI processing)
        function generateNotes() {
            const content = document.getElementById('contentInput').value;
            
            if (!content.trim() && !currentFile) {
                showNotification('Please enter some content or upload a file first', true);
                return;
            }
            
            // Show loading state
            generateBtn.innerHTML = '<div class="loading"></div> Generating Notes...';
            generateBtn.disabled = true;
            
            // Clear previous output
            notesOutput.innerHTML = '<div class="empty-state"><i class="fas fa-spinner fa-spin"></i><p>Generating notes with AI...</p></div>';
            
            // Simulate processing time
            setTimeout(() => {
                try {
                    let processedContent = content;
                    
                    // If a file was uploaded, simulate processing it
                    if (currentFile) {
                        processedContent = simulateFileProcessing(currentFile, content);
                    }
                    
                    // Generate notes using our Python-like algorithm
                    generatedNotes = generateNotesAI(processedContent);
                    
                    // Display the notes
                    displayNotes(generatedNotes);
                    
                    showNotification('Notes generated successfully!');
                } catch (error) {
                    console.error('Error generating notes:', error);
                    notesOutput.innerHTML = '<div class="empty-state"><i class="fas fa-exclamation-triangle"></i><p>Error generating notes. Please try again.</p></div>';
                    showNotification('Error generating notes', true);
                } finally {
                    // Reset button state
                    generateBtn.innerHTML = '<i class="fas fa-magic"></i> Generate Smart Notes';
                    generateBtn.disabled = false;
                }
            }, 2000);
        }
        
        // Simulate file processing (in a real app, this would extract text from the file)
        function simulateFileProcessing(file, fallbackContent) {
            // This is a simulation - in a real app, you would extract text from the file
            const fileType = file.type;
            let content = fallbackContent;
            
            if (fileType === 'application/pdf') {
                content = "PDF content simulation: Important concepts from document. " +
                         "First main idea with supporting details. Second key concept explained. " +
                         "Summary of the main points from the uploaded PDF file.";
            } else if (fileType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
                content = "DOCX content simulation: Key takeaways from document. " +
                         "Primary themes and ideas. Supporting evidence and examples. " +
                         "Conclusions and recommendations from the Word document.";
            } else if (fileType === 'text/plain') {
                content = "Text file content simulation: Main ideas extracted from text. " +
                         "Important points highlighted. Key concepts summarized. " +
                         "Essential information from the uploaded text file.";
            }
            
            return content + " " + fallbackContent;
        }
        
        // Python-like algorithm for generating notes
        function generateNotesAI(text, num_notes = 7) {
            if (!text.trim()) {
                return ["No content provided to generate notes."];
            }
            
            // Simple sentence tokenization
            const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);
            
            if (sentences.length < 3) {
                return [text] || ["No meaningful content found."];
            }
            
            // Simple "important" word detection
            const importantWords = ['important', 'key', 'essential', 'critical', 'significant', 
                                  'major', 'primary', 'principal', 'core', 'fundamental', 
                                  'vital', 'crucial', 'necessary', 'value', 'benefit', 
                                  'advantage', 'concept', 'theory', 'definition', 'example'];
            
            // Score sentences based on important words and length
            const sentenceScores = {};
            sentences.forEach(sentence => {
                let score = 0;
                const words = sentence.toLowerCase().split(/\s+/);
                
                // Score based on important words
                words.forEach(word => {
                    if (importantWords.includes(word)) {
                        score += 3;
                    }
                });
                
                // Score based on length (medium-length sentences are often more substantive)
                const wordCount = words.length;
                if (wordCount > 5 && wordCount < 20) {
                    score += 2;
                }
                
                sentenceScores[sentence] = score;
            });
            
            // Sort sentences by score and get top ones
            const sortedSentences = Object.entries(sentenceScores)
                .sort((a, b) => b[1] - a[1])
                .map(entry => entry[0]);
            
            // Get top sentences as notes
            const keySentences = sortedSentences.slice(0, Math.min(num_notes, sortedSentences.length));
            
            // Clean up the notes
            const notes = [];
            keySentences.forEach(sentence => {
                // Remove extra whitespace
                let cleanNote = sentence.replace(/\s+/g, ' ').trim();
                // Ensure it ends with proper punctuation
                if (cleanNote && !/[.!?]$/.test(cleanNote)) {
                    cleanNote += '.';
                }
                // Capitalize first letter
                cleanNote = cleanNote.charAt(0).toUpperCase() + cleanNote.slice(1);
                notes.push(cleanNote);
            });
            
            return notes.length > 0 ? notes : ["No meaningful notes could be generated."];
        }
        
        // Display generated notes
        function displayNotes(notes) {
            notesOutput.innerHTML = '';
            
            if (notes.length === 0) {
                notesOutput.innerHTML = '<div class="empty-state"><i class="fas fa-exclamation-circle"></i><p>No notes could be generated from the content.</p></div>';
                return;
            }
            
            notes.forEach(note => {
                const noteElement = document.createElement('div');
                noteElement.className = 'note-item';
                noteElement.innerHTML = `
                    <i class="fas fa-check-circle"></i>
                    <div class="note-text">${note}</div>
                `;
                notesOutput.appendChild(noteElement);
            });
        }
        
        // Function to clear the content input
        function clearContent() {
            document.getElementById('contentInput').value = '';
            document.getElementById('contentInput').focus();
        }
        
        // Function to paste content from clipboard
        async function pasteContent() {
            try {
                const text = await navigator.clipboard.readText();
                document.getElementById('contentInput').value = text;
                showNotification('Content pasted from clipboard');
            } catch (err) {
                showNotification('Failed to paste from clipboard', true);
                console.error('Failed to read clipboard contents: ', err);
            }
        }
        
        // Function to copy all generated notes
        function copyNotes() {
            if (generatedNotes.length === 0) {
                showNotification('No notes to copy', true);
                return;
            }
            
            let notesText = '';
            generatedNotes.forEach((note, index) => {
                notesText += `${index + 1}. ${note}\n`;
            });
            
            navigator.clipboard.writeText(notesText).then(() => {
                showNotification('Notes copied to clipboard!');
            }).catch(err => {
                showNotification('Failed to copy notes', true);
                console.error('Could not copy text: ', err);
            });
        }
        
        // Function to save notes as a text file
        function saveNotes() {
            if (generatedNotes.length === 0) {
                showNotification('No notes to save', true);
                return;
            }
            
            let notesText = 'Smart Notes - Generated Notes\n\n';
            generatedNotes.forEach((note, index) => {
                notesText += `${index + 1}. ${note}\n\n`;
            });
            
            const blob = new Blob([notesText], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = 'smart-notes.txt';
            document.body.appendChild(a);
            a.click();
            
            setTimeout(() => {
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                showNotification('Notes saved successfully!');
            }, 100);
        }
        
        // Function to show notification
        function showNotification(message, isError = false) {
            notification.className = isError ? 'notification error' : 'notification';
            notificationIcon.className = isError ? 'fas fa-exclamation-circle' : 'fas fa-check-circle';
            notificationText.textContent = message;
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }
        
        // Add event listener for Enter key in textarea
        document.getElementById('contentInput').addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && e.ctrlKey) {
                generateNotes();
            }
        });
    </script>
</body>
</html>




Test From : 
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Neurodevelopmental Disabilities Self-Check</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    :root {
      --primary: #4a90e2;
      --primary-dark: #3a78c2;
      --secondary: #6e48aa;
      --light-bg: #f8faff;
      --card-bg: #ffffff;
      --text: #223;
      --text-light: #6c757d;
      --success: #28a745;
      --warning: #ffc107;
      --danger: #dc3545;
      --border: #d9e6f9;
      --shadow: 0 4px 12px rgba(0,0,0,0.08);
      --radius: 12px;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: "Poppins", Arial, sans-serif;
      background: linear-gradient(135deg, #e6f0ff, #f4fbf6);
      margin: 0;
      padding: 20px;
      color: var(--text);
      line-height: 1.6;
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .container {
      width: 100%;
      max-width: 1000px;
      margin: 20px auto;
      padding: 25px;
      background: var(--card-bg);
      border-radius: var(--radius);
      box-shadow: var(--shadow);
    }

    header {
      text-align: center;
      margin-bottom: 25px;
      padding-bottom: 15px;
      border-bottom: 1px solid var(--border);
    }

    h1 {
      font-size: 2.2rem;
      color: var(--secondary);
      margin-bottom: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 12px;
    }

    .subtitle {
      color: var(--text-light);
      font-size: 1rem;
      max-width: 700px;
      margin: 0 auto;
    }

    .selection-panel {
      background: var(--light-bg);
      padding: 20px;
      border-radius: var(--radius);
      margin-bottom: 25px;
      box-shadow: var(--shadow);
    }

    .category-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 12px;
      margin: 15px 0;
    }

    .category-item {
      display: flex;
      align-items: center;
      padding: 10px 15px;
      background: var(--card-bg);
      border-radius: 8px;
      border: 1px solid var(--border);
      cursor: pointer;
      transition: all 0.3s;
    }

    .category-item:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow);
    }

    .category-item.selected {
      background: var(--primary);
      color: white;
      border-color: var(--primary-dark);
    }

    .category-item i {
      margin-right: 10px;
      font-size: 1.2rem;
    }

    select, .generate-btn {
      padding: 12px;
      border-radius: 8px;
      border: 1px solid var(--border);
      font-size: 1rem;
      margin: 10px 0;
      width: 100%;
    }

    .generate-btn {
      background: var(--primary);
      color: #fff;
      border: none;
      cursor: pointer;
      transition: 0.3s;
      font-weight: 600;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
    }

    .generate-btn:hover {
      background: var(--primary-dark);
    }

    .generate-btn:disabled {
      background: #cccccc;
      cursor: not-allowed;
    }

    .quiz-container {
      display: none;
      margin-top: 20px;
    }

    .quiz-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .question-count {
      font-weight: 600;
      color: var(--text-light);
    }

    .question-card {
      background: var(--light-bg);
      border: 1px solid var(--border);
      border-radius: var(--radius);
      padding: 20px;
      margin-bottom: 20px;
      transition: 0.3s;
      box-shadow: var(--shadow);
    }

    .question-card:hover {
      background: #f1f8ff;
    }

    .question-card h3 {
      margin: 0 0 8px 0;
      font-size: 1.05rem;
      color: var(--secondary);
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .category-tag {
      display: inline-block;
      padding: 3px 10px;
      background: var(--primary);
      color: white;
      border-radius: 20px;
      font-size: 0.75rem;
      margin-left: 10px;
    }

    .options {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
      margin-top: 15px;
    }

    .options button {
      flex: 1;
      min-width: 100px;
      background: #f1f5fb;
      border: 1px solid #c5d4f5;
      border-radius: 8px;
      padding: 10px 12px;
      cursor: pointer;
      font-size: 0.9rem;
      transition: 0.3s;
    }

    .options button:hover {
      background: #dde8fb;
    }

    .options button.active {
      background: var(--primary);
      color: #fff;
      border: none;
    }

    .options button.active.never { background: #28a745; }
    .options button.active.sometimes { background: #ffc107; color: #000; }
    .options button.active.often { background: #fd7e14; }
    .options button.active.always { background: #dc3545; }

    .progress-container {
      margin: 25px 0;
    }

    .progress-text {
      display: flex;
      justify-content: space-between;
      margin-bottom: 8px;
      font-size: 0.9rem;
      color: var(--text-light);
    }

    .progress {
      width: 100%;
      height: 12px;
      background: #e0e8f5;
      border-radius: 6px;
      overflow: hidden;
    }

    .progress-bar {
      height: 100%;
      width: 0;
      background: linear-gradient(90deg, var(--primary), var(--secondary));
      border-radius: 6px;
      transition: width 0.4s;
    }

    .navigation-buttons {
      display: flex;
      gap: 10px;
      margin-top: 20px;
    }

    .nav-btn {
      padding: 12px 20px;
      border-radius: 8px;
      border: none;
      font-size: 1rem;
      cursor: pointer;
      transition: 0.3s;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .prev-btn {
      background: #f8f9fa;
      color: var(--text);
      border: 1px solid var(--border);
    }

    .prev-btn:hover {
      background: #e9ecef;
    }

    .next-btn {
      background: var(--primary);
      color: white;
    }

    .next-btn:hover {
      background: var(--primary-dark);
    }

    .submit-btn {
      width: 100%;
      padding: 15px;
      background: var(--secondary);
      border: none;
      border-radius: 10px;
      font-size: 1.1rem;
      color: #fff;
      cursor: pointer;
      margin-top: 20px;
      transition: 0.3s;
      font-weight: 600;
    }

    .submit-btn:hover {
      background: #5d3d97;
    }

    footer {
      margin-top: 30px;
      text-align: center;
      font-size: 0.8rem;
      color: var(--text-light);
      padding-top: 15px;
      border-top: 1px solid var(--border);
    }

    /* Modal Styles */
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      justify-content: center;
      align-items: center;
      z-index: 999;
      padding: 20px;
    }

    .modal-content {
      background: #fff;
      padding: 30px;
      border-radius: var(--radius);
      max-width: 800px;
      width: 100%;
      max-height: 90vh;
      overflow-y: auto;
      position: relative;
      box-shadow: 0 10px 30px rgba(0,0,0,0.3);
      animation: fadeIn 0.4s ease;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    .close-btn {
      position: absolute;
      top: 15px;
      right: 20px;
      background: none;
      border: none;
      font-size: 1.8rem;
      cursor: pointer;
      color: var(--text-light);
    }

    .result-header {
      text-align: center;
      margin-bottom: 25px;
      color: var(--secondary);
    }

    .result-summary {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }

    .result-card {
      background: var(--light-bg);
      border-radius: var(--radius);
      padding: 20px;
      text-align: center;
      box-shadow: var(--shadow);
    }

    .result-card h3 {
      margin-bottom: 15px;
      color: var(--secondary);
    }

    .score-circle {
      width: 100px;
      height: 100px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 15px;
      font-size: 1.8rem;
      font-weight: bold;
      position: relative;
    }

    .score-low { background: #e8f5e9; color: var(--success); border: 3px solid var(--success); }
    .score-medium { background: #fff8e1; color: var(--warning); border: 3px solid var(--warning); }
    .score-high { background: #ffebee; color: var(--danger); border: 3px solid var(--danger); }

    .bar {
      height: 12px;
      background: #e3e7ff;
      border-radius: 6px;
      overflow: hidden;
      margin: 8px 0;
    }

    .bar-fill {
      display: block;
      height: 100%;
      background: linear-gradient(90deg, var(--primary), var(--secondary));
      width: 0;
      transition: width 0.6s;
    }

    .recommendations {
      margin-top: 30px;
    }

    .recommendation-card {
      background: var(--light-bg);
      border-left: 4px solid var(--primary);
      padding: 15px;
      margin-bottom: 15px;
      border-radius: 4px;
    }

    .resources-section {
      margin-top: 30px;
    }

    .resource-list {
      list-style: none;
    }

    .resource-list li {
      margin-bottom: 10px;
      padding-left: 25px;
      position: relative;
    }

    .resource-list li i {
      position: absolute;
      left: 0;
      top: 3px;
      color: var(--primary);
    }

    .print-btn {
      padding: 10px 20px;
      background: var(--primary);
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      margin-top: 20px;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      .container {
        padding: 15px;
      }
      
      h1 {
        font-size: 1.8rem;
      }
      
      .options {
        flex-direction: column;
      }
      
      .options button {
        width: 100%;
      }
      
      .category-grid {
        grid-template-columns: 1fr;
      }
      
      .result-summary {
        grid-template-columns: 1fr;
      }
    }

    /* Animation for questions */
    @keyframes slideIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .question-card {
      animation: slideIn 0.4s ease;
    }

    /* Tooltip */
    .tooltip {
      position: relative;
      display: inline-block;
      margin-left: 8px;
    }

    .tooltip i {
      color: var(--primary);
      font-size: 0.9rem;
    }

    .tooltip-text {
      visibility: hidden;
      width: 200px;
      background-color: #333;
      color: #fff;
      text-align: center;
      border-radius: 6px;
      padding: 8px;
      position: absolute;
      z-index: 1;
      bottom: 125%;
      left: 50%;
      transform: translateX(-50%);
      opacity: 0;
      transition: opacity 0.3s;
      font-size: 0.8rem;
      font-weight: normal;
    }

    .tooltip:hover .tooltip-text {
      visibility: visible;
      opacity: 1;
    }
    
    .info-text {
      background: #e8f4ff;
      padding: 12px;
      border-radius: 8px;
      margin: 15px 0;
      font-size: 0.9rem;
      border-left: 4px solid var(--primary);
    }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <h1><i class="fas fa-brain"></i> Neurodevelopmental Self-Check</h1>
      <p class="subtitle">This screening tool helps identify possible traits associated with neurodevelopmental conditions. It is not a diagnostic tool but can help you understand areas where you might want to seek professional guidance.</p>
    </header>

    <div class="selection-panel">
      <h2><i class="fas fa-check-square"></i> Select Disabilities to Include:</h2>
      <p class="info-text">Please select one or more categories to begin your screening. You can select multiple categories by clicking on them.</p>
      
      <div class="category-grid">
        <div class="category-item" data-value="ID">
          <i class="fas fa-lightbulb"></i> Intellectual Disability
        </div>
        <div class="category-item" data-value="ASD">
          <i class="fas fa-puzzle-piece"></i> Autism Spectrum
        </div>
        <div class="category-item" data-value="ADHD">
          <i class="fas fa-bolt"></i> ADHD
        </div>
        <div class="category-item" data-value="SLD">
          <i class="fas fa-book"></i> Learning Disorder
        </div>
        <div class="category-item" data-value="COMM">
          <i class="fas fa-comments"></i> Communication
        </div>
        <div class="category-item" data-value="DCD">
          <i class="fas fa-hands"></i> Coordination Disorder
        </div>
      </div>
      
      <button class="generate-btn" id="generateBtn">
        <i class="fas fa-play-circle"></i> Start Screening
      </button>
    </div>

    <div class="quiz-container" id="quizContainer">
      <div class="quiz-header">
        <h2><i class="fas fa-question-circle"></i> Screening Questions</h2>
        <div class="question-count" id="questionCount">Question 1 of 10</div>
      </div>
      
      <div class="progress-container">
        <div class="progress-text">
          <span>Progress</span>
          <span id="progressPercentage">0%</span>
        </div>
        <div class="progress">
          <div class="progress-bar" id="progressBar"></div>
        </div>
      </div>

      <div id="questionContainer"></div>

      <div class="navigation-buttons">
        <button class="nav-btn prev-btn" id="prevBtn">
          <i class="fas fa-arrow-left"></i> Previous
        </button>
        <button class="nav-btn next-btn" id="nextBtn">
          Next <i class="fas fa-arrow-right"></i>
        </button>
      </div>

      <button class="submit-btn" type="button" id="submitBtn">
        <i class="fas fa-chart-bar"></i> See My Results
      </button>
    </div>

    <footer>
      <p>Made for awareness & students ✨ | This tool is for informational purposes only and is not a diagnostic instrument.</p>
    </footer>
  </div>

  <!-- Results Modal -->
  <div class="modal" id="resultModal">
    <div class="modal-content">
      <button class="close-btn" id="closeModal">&times;</button>
      
      <div class="result-header">
        <h2><i class="fas fa-chart-pie"></i> Your Screening Summary</h2>
        <p>Based on your responses, here's an overview of potential traits</p>
      </div>
      
      <div class="result-summary" id="resultSummary"></div>
      
      <hr/>
      
      <h3><i class="fas fa-clipboard-list"></i> Detailed Report</h3>
      <div id="finalReport"></div>
      
      <div class="resources-section">
        <h3><i class="fas fa-life-ring"></i> Resources & Next Steps</h3>
        <p>If you have concerns based on these results, consider these resources:</p>
        <ul class="resource-list">
          <li><i class="fas fa-globe"></i> <a href="#" target="_blank">National Institute of Mental Health</a></li>
          <li><i class="fas fa-globe"></i> <a href="#" target="_blank">CHADD - ADHD Resources</a></li>
          <li><i class="fas fa-globe"></i> <a href="#" target="_blank">Autism Speaks Resource Guide</a></li>
          <li><i class="fas fa-globe"></i> <a href="#" target="_blank">Learning Disabilities Association</a></li>
        </ul>
      </div>
      
      <button class="print-btn" id="printBtn">
        <i class="fas fa-print"></i> Print Results
      </button>
    </div>
  </div>

  <script>
    const questionBank = {
      ID: [
        "I often need extra help to understand or manage tasks.",
        "I find it difficult to solve problems without guidance.",
        "I need more time than others to learn new skills.",
        "I struggle with remembering instructions.",
        "I often rely on others for daily decision making.",
        "I find abstract concepts very confusing.",
        "I get overwhelmed with multi-step tasks.",
        "I need constant reminders for routines.",
        "I find it challenging to manage money or time.",
        "I require repeated practice to master simple tasks."
      ],
      ASD: [
        "I prefer routines and get uncomfortable with sudden changes.",
        "I struggle with understanding social cues.",
        "I find it easier to talk about my interests than other topics.",
        "I dislike loud noises or bright lights.",
        "I often repeat actions or phrases.",
        "I prefer being alone over group activities.",
        "I focus intensely on specific interests.",
        "I struggle to make eye contact.",
        "I find sarcasm or jokes confusing.",
        "I like things to be arranged in a particular order."
      ],
      ADHD: [
        "I find it hard to stay focused for long.",
        "I often feel restless or fidgety.",
        "I get distracted easily.",
        "I struggle to finish tasks I start.",
        "I talk excessively or interrupt others.",
        "I lose things I need often.",
        "I forget appointments or deadlines.",
        "I act impulsively without thinking.",
        "I procrastinate on important work.",
        "I need external pressure to complete tasks."
      ],
      SLD: [
        "I struggle with reading compared to peers.",
        "I find spelling difficult even for simple words.",
        "I have trouble understanding written material.",
        "I find writing tasks very challenging.",
        "I mix up letters or numbers.",
        "I struggle to learn basic math facts.",
        "I avoid tasks that involve reading or writing.",
        "I read slowly and with great effort.",
        "I struggle with word problems in math.",
        "I often mispronounce or confuse similar words."
      ],
      COMM: [
        "I have trouble expressing myself clearly.",
        "I find it hard to understand spoken instructions.",
        "I get anxious in conversations.",
        "I avoid talking in groups.",
        "I use fewer words than others my age.",
        "I struggle to find the right words.",
        "I misunderstand meanings of some words.",
        "I pause a lot while speaking.",
        "I have difficulty following fast conversations.",
        "I often ask people to repeat what they said."
      ],
      DCD: [
        "I seem clumsy compared to peers.",
        "I struggle with sports or games requiring coordination.",
        "I find handwriting messy or tiring.",
        "I have trouble tying shoelaces or buttons.",
        "I bump into things often.",
        "I find it hard to learn dance or movement sequences.",
        "I struggle with using tools like scissors.",
        "I avoid physical activities.",
        "I drop things frequently.",
        "I find new motor tasks very hard to learn."
      ]
    };

    const categoryLabels = {
      ID: "Intellectual Disability",
      ASD: "Autism Spectrum",
      ADHD: "ADHD",
      SLD: "Specific Learning Disorder",
      COMM: "Communication",
      DCD: "Coordination Disorder"
    };

    const categoryIcons = {
      ID: "fa-lightbulb",
      ASD: "fa-puzzle-piece",
      ADHD: "fa-bolt",
      SLD: "fa-book",
      COMM: "fa-comments",
      DCD: "fa-hands"
    };

    let currentQuestions = [];
    let currentQuestionIndex = 0;
    let userResponses = {};

    // Initialize the application
    document.addEventListener('DOMContentLoaded', function() {
      // Set up category selection
      document.querySelectorAll('.category-item').forEach(item => {
        item.addEventListener('click', function() {
          this.classList.toggle('selected');
        });
      });

      // Generate questions when button is clicked
      document.getElementById('generateBtn').addEventListener('click', generateQuestions);

      // Set up navigation buttons
      document.getElementById('prevBtn').addEventListener('click', showPreviousQuestion);
      document.getElementById('nextBtn').addEventListener('click', showNextQuestion);

      // Set up submit button
      document.getElementById('submitBtn').addEventListener('click', showResults);

      // Close modal
      document.getElementById('closeModal').addEventListener('click', function() {
        document.getElementById('resultModal').style.display = 'none';
      });

      // Print results
      document.getElementById('printBtn').addEventListener('click', function() {
        window.print();
      });
    });

    function generateQuestions() {
      const selectedCategories = Array.from(document.querySelectorAll('.category-item.selected'))
        .map(item => item.dataset.value);
      
      if (selectedCategories.length === 0) {
        alert('Please select at least one category to continue.');
        return;
      }

      // Reset state
      currentQuestions = [];
      currentQuestionIndex = 0;
      userResponses = {};

      // Generate questions from selected categories
      selectedCategories.forEach(category => {
        questionBank[category].forEach(question => {
          currentQuestions.push({
            category,
            text: question
          });
        });
      });

      // Shuffle questions for better user experience
      shuffleArray(currentQuestions);

      // Show quiz container
      document.getElementById('quizContainer').style.display = 'block';

      // Scroll to top
      window.scrollTo(0, 0);

      // Show first question
      showQuestion(0);
    }

    function showQuestion(index) {
      if (index < 0 || index >= currentQuestions.length) return;
      
      currentQuestionIndex = index;
      const question = currentQuestions[index];
      
      // Update question count
      document.getElementById('questionCount').textContent = `Question ${index + 1} of ${currentQuestions.length}`;
      
      // Create question card
      const questionContainer = document.getElementById('questionContainer');
      questionContainer.innerHTML = `
        <div class="question-card">
          <h3>
            <i class="fas ${categoryIcons[question.category]}"></i>
            ${categoryLabels[question.category]}
            <span class="category-tag">${question.category}</span>
          </h3>
          <p>${question.text}</p>
          <div class="options">
            <button type="button" data-value="0" class="never">Never</button>
            <button type="button" data-value="1" class="sometimes">Sometimes</button>
            <button type="button" data-value="2" class="often">Often</button>
            <button type="button" data-value="3" class="always">Always</button>
          </div>
        </div>
      `;
      
      // Set active class if user has already answered this question
      const questionId = `${question.category}-${index}`;
      if (userResponses[questionId]) {
        const buttons = questionContainer.querySelectorAll('.options button');
        buttons.forEach(button => {
          if (parseInt(button.dataset.value) === userResponses[questionId]) {
            button.classList.add('active');
          }
        });
      }
      
      // Add event listeners to options
      questionContainer.querySelectorAll('.options button').forEach(button => {
        button.addEventListener('click', function() {
          // Remove active class from all buttons in this question
          this.parentElement.querySelectorAll('button').forEach(btn => {
            btn.classList.remove('active');
          });
          
          // Add active class to clicked button
          this.classList.add('active');
          
          // Store response
          const questionId = `${question.category}-${index}`;
          userResponses[questionId] = parseInt(this.dataset.value);
          
          // Update progress
          updateProgress();
        });
      });
      
      // Update navigation buttons
      document.getElementById('prevBtn').style.display = index === 0 ? 'none' : 'flex';
      document.getElementById('nextBtn').style.display = index === currentQuestions.length - 1 ? 'none' : 'flex';
      document.getElementById('submitBtn').style.display = index === currentQuestions.length - 1 ? 'block' : 'none';
      
      // Update progress
      updateProgress();
    }

    function showNextQuestion() {
      if (currentQuestionIndex < currentQuestions.length - 1) {
        showQuestion(currentQuestionIndex + 1);
      }
    }

    function showPreviousQuestion() {
      if (currentQuestionIndex > 0) {
        showQuestion(currentQuestionIndex - 1);
      }
    }

    function updateProgress() {
      const answeredCount = Object.keys(userResponses).length;
      const progressPercentage = (answeredCount / currentQuestions.length) * 100;
      
      document.getElementById('progressBar').style.width = `${progressPercentage}%`;
      document.getElementById('progressPercentage').textContent = `${Math.round(progressPercentage)}%`;
    }

    function showResults() {
      const results = {};
      let totalScore = 0;
      let maxPossibleScore = 0;
      
      // Initialize results object
      Object.keys(categoryLabels).forEach(category => {
        results[category] = {
          score: 0,
          count: 0,
          questions: []
        };
      });
      
      // Calculate scores
      currentQuestions.forEach((question, index) => {
        const questionId = `${question.category}-${index}`;
        const response = userResponses[questionId] || 0;
        
        results[question.category].score += response;
        results[question.category].count += 1;
        results[question.category].questions.push({
          text: question.text,
          response: response
        });
        
        totalScore += response;
        maxPossibleScore += 3; // Maximum value for any question is 3
      });
      
      // Calculate percentages and prepare for display
      const resultSummary = document.getElementById('resultSummary');
      const finalReport = document.getElementById('finalReport');
      
      resultSummary.innerHTML = '';
      finalReport.innerHTML = '';
      
      // Create result cards for each category
      Object.keys(results).forEach(category => {
        if (results[category].count > 0) {
          const categoryScore = results[category].score;
          const maxCategoryScore = results[category].count * 3;
          const percentage = Math.round((categoryScore / maxCategoryScore) * 100);
          
          let scoreClass = 'score-low';
          if (percentage > 40) scoreClass = 'score-medium';
          if (percentage > 70) scoreClass = 'score-high';
          
          const card = document.createElement('div');
          card.className = 'result-card';
          card.innerHTML = `
            <h3><i class="fas ${categoryIcons[category]}"></i> ${categoryLabels[category]}</h3>
            <div class="score-circle ${scoreClass}">${percentage}%</div>
            <p>Score: ${categoryScore}/${maxCategoryScore}</p>
          `;
          
          resultSummary.appendChild(card);
          
          // Add to detailed report
          let consultingNote = "";
          if (percentage <= 30) {
            consultingNote = "Low traits observed. No major concerns identified in this area.";
          } else if (percentage <= 60) {
            consultingNote = "Moderate traits observed. Consider monitoring or implementing self-help strategies.";
          } else {
            consultingNote = "High traits observed. It may be helpful to consult a professional for further evaluation.";
          }
          
          finalReport.innerHTML += `
            <div class="recommendation-card">
              <h4>${categoryLabels[category]} (${percentage}%)</h4>
              <p>${consultingNote}</p>
            </div>
          `;
        }
      });
      
      // Show overall score if multiple categories
      if (Object.keys(results).length > 1) {
        const overallPercentage = Math.round((totalScore / maxPossibleScore) * 100);
        let overallScoreClass = 'score-low';
        if (overallPercentage > 40) overallScoreClass = 'score-medium';
        if (overallPercentage > 70) overallScoreClass = 'score-high';
        
        const overallCard = document.createElement('div');
        overallCard.className = 'result-card';
        overallCard.innerHTML = `
          <h3><i class="fas fa-star"></i> Overall Score</h3>
          <div class="score-circle ${overallScoreClass}">${overallPercentage}%</div>
          <p>Total: ${totalScore}/${maxPossibleScore}</p>
        `;
        
        resultSummary.prepend(overallCard);
      }
      
      // Show modal
      document.getElementById('resultModal').style.display = 'flex';
    }

    // Utility function to shuffle array
    function shuffleArray(array) {
      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
      }
      return array;
    }
  </script>
</body>
</html>









Math : 
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Advanced Math Problem Solver</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/11.8.0/math.min.js"></script>
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    body {
      background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);
      color: #333;
      line-height: 1.6;
      min-height: 100vh;
      padding: 20px;
    }
    .container {
      max-width: 1200px;
      margin: 0 auto;
    }
    header {
      text-align: center;
      margin-bottom: 30px;
      padding: 25px;
      background: linear-gradient(135deg, #6e8efb 0%, #a777e3 100%);
      color: white;
      border-radius: 15px;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }
    h1 {
      font-size: 2.8rem;
      margin-bottom: 10px;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
    }
    .tagline {
      font-size: 1.3rem;
      opacity: 0.9;
      max-width: 600px;
      margin: 0 auto;
    }
    .main-content {
      display: flex;
      flex-wrap: wrap;
      gap: 25px;
      margin-bottom: 30px;
    }
    .input-section,
    .result-section {
      flex: 1;
      min-width: 300px;
      background: white;
      padding: 30px;
      border-radius: 15px;
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    }
    .section-title {
      font-size: 1.6rem;
      margin-bottom: 25px;
      color: #2c3e50;
      border-bottom: 3px solid #6e8efb;
      padding-bottom: 12px;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    .section-title i {
      color: #6e8efb;
    }
    .input-area {
      margin-bottom: 25px;
    }
    textarea {
      width: 100%;
      height: 120px;
      padding: 15px;
      border: 2px solid #ddd;
      border-radius: 8px;
      font-size: 1.1rem;
      resize: vertical;
      transition: border-color 0.3s;
    }
    textarea:focus {
      outline: none;
      border-color: #6e8efb;
      box-shadow: 0 0 0 3px rgba(110, 142, 251, 0.2);
    }
    .math-categories {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 15px;
      margin-top: 20px;
    }
    .category-btn {
      background: linear-gradient(135deg, #4caf50 0%, #2e7d32 100%);
      color: white;
      border: none;
      padding: 12px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 1rem;
      font-weight: 600;
      transition: all 0.3s;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      text-align: center;
    }
    .category-btn:hover {
      opacity: 0.9;
      transform: translateY(-3px);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }
    .btn {
      background: linear-gradient(135deg, #6e8efb 0%, #a777e3 100%);
      color: white;
      border: none;
      padding: 14px 28px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 1.1rem;
      font-weight: 600;
      transition: all 0.3s;
      display: inline-flex;
      align-items: center;
      gap: 8px;
      margin-top: 15px;
    }
    .btn:hover {
      opacity: 0.9;
      transform: translateY(-3px);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }
    .btn:disabled {
      background: #cccccc;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }
    .result-content {
      margin-top: 20px;
    }
    .problem-display {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 12px;
      margin-bottom: 25px;
      border-left: 5px solid #6e8efb;
    }
    .concepts {
      margin-bottom: 25px;
    }
    .concept-tags {
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
      margin-top: 15px;
    }
    .concept-tag {
      background: #e1f0ff;
      color: #0066cc;
      padding: 8px 18px;
      border-radius: 25px;
      font-size: 1rem;
      display: flex;
      align-items: center;
      gap: 5px;
    }
    .solution-steps {
      margin-top: 25px;
    }
    .step {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 12px;
      margin-bottom: 20px;
      border-left: 5px solid #a777e3;
      transition: transform 0.3s;
    }
    .step:hover {
      transform: translateX(5px);
    }
    .step-number {
      font-weight: bold;
      color: #a777e3;
      margin-bottom: 10px;
      font-size: 1.1rem;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    .step-explanation {
      margin-top: 10px;
      padding: 10px;
      background: #eef2ff;
      border-radius: 8px;
      font-style: italic;
    }
    .loading {
      text-align: center;
      padding: 30px;
      display: none;
    }
    .spinner {
      border: 5px solid #f3f3f3;
      border-top: 5px solid #6e8efb;
      border-radius: 50%;
      width: 50px;
      height: 50px;
      animation: spin 1s linear infinite;
      margin: 0 auto 20px;
    }
    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }
      100% {
        transform: rotate(360deg);
      }
    }
    .error {
      color: #e74c3c;
      padding: 15px;
      background: #ffeaea;
      border-radius: 8px;
      margin-top: 15px;
      display: none;
      border-left: 5px solid #e74c3c;
    }
    footer {
      text-align: center;
      margin-top: 40px;
      padding: 25px;
      color: #7f8c8d;
      background: white;
      border-radius: 15px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    }
    .final-answer {
      background: linear-gradient(135deg, #4caf50 0%, #2e7d32 100%);
      color: white;
      padding: 20px;
      border-radius: 12px;
      margin-top: 25px;
      text-align: center;
      font-size: 1.3rem;
      font-weight: bold;
    }
    @media (max-width: 768px) {
      .main-content {
        flex-direction: column;
      }
      .math-categories {
        grid-template-columns: 1fr;
      }
    }
    .math-expression {
      font-size: 1.2rem;
      font-family: 'Times New Roman', Times, serif;
      padding: 5px;
      background-color: #f8f9fa;
      border-radius: 4px;
      display: inline-block;
      margin: 5px 0;
    }
    .formula {
      background: #f0f7ff;
      padding: 15px;
      border-radius: 8px;
      margin: 10px 0;
      border-left: 4px solid #6e8efb;
    }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <h1><i class="fas fa-calculator"></i> Advanced Math Problem Solver</h1>
      <p class="tagline">
        Enter any math problem as text and get detailed step-by-step explanations
      </p>
    </header>

    <div class="main-content">
      <div class="input-section">
        <h2 class="section-title">
          <i class="fas fa-pencil-alt"></i> Enter Your Math Problem
        </h2>
        <div class="input-area">
          <textarea
            id="problemInput"
            placeholder="Enter your math problem here... (e.g., Solve for x: 2x + 5 = 13, Calculate 25 × 34, Find area of circle with radius 5, etc.)"
          ></textarea>
        </div>

        <h3 class="section-title"><i class="fas fa-tags"></i> Math Categories</h3>
        <div class="math-categories">
          <button class="category-btn" onclick="insertExample('arithmetic')">
            <i class="fas fa-plus-minus"></i> Arithmetic
          </button>
          <button class="category-btn" onclick="insertExample('algebra')">
            <i class="fas fa-xmark"></i> Algebra
          </button>
          <button class="category-btn" onclick="insertExample('geometry')">
            <i class="fas fa-shapes"></i> Geometry
          </button>
          <button class="category-btn" onclick="insertExample('trigonometry')">
            <i class="fas fa-circle"></i> Trigonometry
          </button>
        </div>

        <button class="btn" id="solveBtn" onclick="solveProblem()">
          <i class="fas fa-cogs"></i> Solve Problem
        </button>

        <div class="loading" id="loading">
          <div class="spinner"></div>
          <p>Analyzing your math problem...</p>
        </div>

        <div class="error" id="error"></div>
      </div>

      <div class="result-section">
        <h2 class="section-title">
          <i class="fas fa-lightbulb"></i> Solution & Explanation
        </h2>
        <div class="result-content" id="resultContent">
          <p class="placeholder">
            Your solution will appear here after entering a problem.
          </p>
        </div>
      </div>
    </div>

    <footer>
      <p>
        Advanced Math Problem Solver &copy; 2023 | Covers arithmetic, algebra, geometry, and trigonometry
      </p>
    </footer>
  </div>

  <script>
    // Insert example problems to input textarea
    function insertExample(category) {
      const examples = {
        arithmetic: "25 + 37 ",
        algebra: "Solve for x: 2x + 5 = 13",
        geometry: "Find the area of a circle with radius 5",
        trigonometry: "Calculate sin(30°) + cos(60°)",
      };
      document.getElementById("problemInput").value = examples[category];
    }

    // Show loading spinner
    function showLoading(show) {
      document.getElementById("loading").style.display = show ? "block" : "none";
    }

    // Display error message
    function showError(message) {
      const errorDiv = document.getElementById("error");
      if (message) {
        errorDiv.innerText = message;
        errorDiv.style.display = "block";
      } else {
        errorDiv.style.display = "none";
      }
    }

    // Display the solution with explanation
    function displaySolution(problemObj) {
      const resultDiv = document.getElementById("resultContent");
      resultDiv.innerHTML = `
        <div class="problem-display"><strong>Problem:</strong> ${problemObj.problem}</div>
        <div class="concepts">
          <strong>Concepts involved:</strong>
          <div class="concept-tags">
            ${problemObj.concepts.map(c => 
              `<span class="concept-tag"><i class="fas fa-tag"></i> ${c}</span>`
            ).join("")}
          </div>
        </div>
        <div class="solution-steps">
          <strong>Solution Explanation:</strong>
          <p>${problemObj.solutionExplanation}</p>
          ${problemObj.steps.map((step, i) => `
            <div class="step">
              <div class="step-number"><i class="fas fa-arrow-right"></i> Step ${i + 1}</div>
              <p>${step.operation}</p>
              ${step.explanation ? `<div class="step-explanation">${step.explanation}</div>` : ''}
            </div>
          `).join("")}
        </div>
        <div class="final-answer">${problemObj.answer}</div>
      `;
    }

    // Solve the problem
    function solveProblem() {
      let input = document.getElementById("problemInput").value.trim();
      showLoading(true);
      showError(null);
      document.getElementById("resultContent").innerHTML = "";

      setTimeout(() => {
        showLoading(false);
        
        try {
          const solution = solveMathProblem(input);
          displaySolution(solution);
        } catch (error) {
          showError(
            "Sorry, I couldn't solve this problem. Please try a different one or rephrase your question."
          );
        }
      }, 800);
    }

    // Enhanced function to solve math problems with detailed explanations
    function solveMathProblem(problem) {
      const lowerProblem = problem.toLowerCase();
      
      // Arithmetic operations
      if (/^[\d\s\+\-\*\/\(\)\.]+$/.test(problem)) {
        try {
          // Parse and break down the expression
          const steps = [];
          let currentExpression = problem;
          
          // Handle parentheses first
          if (currentExpression.includes('(')) {
            steps.push({
              operation: "Evaluate expressions inside parentheses first",
              explanation: "According to PEMDAS/BODMAS rules, we always start with Parentheses/Brackets"
            });
          }
          
          // Handle exponents next (if any)
          if (currentExpression.includes('^')) {
            steps.push({
              operation: "Evaluate exponents next",
              explanation: "Exponents/Orders come after Parentheses in the order of operations"
            });
          }
          
          // Handle multiplication and division
          if (currentExpression.match(/[\*\/]/)) {
            steps.push({
              operation: "Perform multiplication and division from left to right",
              explanation: "Multiplication and Division have equal precedence and are evaluated left to right"
            });
          }
          
          // Handle addition and subtraction
          if (currentExpression.match(/[\+\-]/)) {
            steps.push({
              operation: "Perform addition and subtraction from left to right",
              explanation: "Addition and Subtraction have equal precedence and are evaluated left to right"
            });
          }
          
          const result = math.evaluate(problem);
          
          steps.push({
            operation: `Final calculation: ${problem} = ${result}`,
            explanation: "After following all order of operations, we arrive at the final result"
          });
          
          return {
            problem: problem,
            concepts: ["Arithmetic", "Order of Operations", "Calculation"],
            solutionExplanation: "We'll evaluate this arithmetic expression using the standard order of operations (PEMDAS/BODMAS): Parentheses, Exponents, Multiplication and Division (left to right), Addition and Subtraction (left to right).",
            steps: steps,
            answer: problem + " = " + result
          };
        } catch (e) {
          throw new Error("Cannot evaluate expression");
        }
      }
      
      // Linear equations: ax + b = c
      const linearMatch = problem.match(/(?:solve for \w+:\s*)?(\d*)\s*([a-zA-Z])\s*([\+\-])\s*(\d+)\s*=\s*(\d+)/i);
      if (linearMatch) {
        const a = linearMatch[1] ? parseInt(linearMatch[1]) : 1;
        const variable = linearMatch[2];
        const op = linearMatch[3];
        const b = parseInt(linearMatch[4]) * (op === '+' ? 1 : -1);
        const c = parseInt(linearMatch[5]);
        
        const steps = [
          {
            operation: `Original equation: ${a}${variable} ${op} ${Math.abs(b)} = ${c}`,
            explanation: "This is a linear equation in one variable"
          },
          {
            operation: `Subtract ${b} from both sides: ${a}${variable} = ${c} - ${b}`,
            explanation: "We isolate the term with the variable by performing the inverse operation on both sides"
          },
          {
            operation: `Simplify: ${a}${variable} = ${c - b}`,
            explanation: "Performing the arithmetic operation on the right side"
          },
          {
            operation: `Divide both sides by ${a}: ${variable} = ${c - b} / ${a}`,
            explanation: "To solve for the variable, we divide both sides by its coefficient"
          }
        ];
        
        const x = (c - b) / a;
        
        steps.push({
          operation: `Final solution: ${variable} = ${x}`,
          explanation: "After performing all operations, we arrive at the solution"
        });
        
        steps.push({
          operation: `Verification: ${a} × ${x} ${op} ${Math.abs(b)} = ${a*x + b}, which equals ${c}`,
            explanation: "We can verify our solution by substituting it back into the original equation"
          });
        
        return {
          problem: problem,
          concepts: ["Algebra", "Linear Equation", "Solving for variable"],
          solutionExplanation: "To solve for " + variable + ", we need to isolate the variable on one side of the equation using inverse operations.",
          steps: steps,
          answer: variable + " = " + x
        };
      }
      
      // Quadratic equations: ax² + bx + c = 0
      const quadraticMatch = problem.match(/(\d*)\s*([a-zA-Z])²\s*([\+\-])\s*(\d*)\s*([a-zA-Z])\s*([\+\-])\s*(\d+)\s*=\s*0/i);
      if (quadraticMatch) {
        const a = quadraticMatch[1] ? parseInt(quadraticMatch[1]) : 1;
        const variable = quadraticMatch[2];
        const op1 = quadraticMatch[3];
        const bVal = quadraticMatch[4] ? parseInt(quadraticMatch[4]) : 1;
        const b = bVal * (op1 === '+' ? 1 : -1);
        const op2 = quadraticMatch[6];
        const c = parseInt(quadraticMatch[7]) * (op2 === '+' ? 1 : -1);
        
        // Calculate discriminant
        const discriminant = b*b - 4*a*c;
        
        const steps = [
          {
            operation: `Original equation: ${a}${variable}² ${op1} ${bVal}${variable} ${op2} ${Math.abs(c)} = 0`,
            explanation: "This is a quadratic equation in standard form"
          },
          {
            operation: `Identify coefficients: a = ${a}, b = ${b}, c = ${c}`,
            explanation: "For the quadratic formula, we need to identify the coefficients a, b, and c"
          },
          {
            operation: `Calculate discriminant: D = b² - 4ac = ${b}² - 4 × ${a} × ${c} = ${discriminant}`,
            explanation: "The discriminant determines the nature of the roots (real vs. complex)"
          }
        ];
        
        if (discriminant < 0) {
          steps.push({
            operation: "Since discriminant is negative, the roots are complex numbers",
            explanation: "A negative discriminant indicates that the quadratic equation has no real solutions, but two complex solutions"
          });
          
          return {
            problem: problem,
            concepts: ["Algebra", "Quadratic Equation", "Complex Roots"],
            solutionExplanation: "This quadratic equation has complex roots because the discriminant is negative.",
            steps: steps,
            answer: "No real solutions (complex roots)"
          };
        } else {
          const x1 = (-b + Math.sqrt(discriminant)) / (2*a);
          const x2 = (-b - Math.sqrt(discriminant)) / (2*a);
          
          steps.push({
            operation: `Apply quadratic formula: ${variable} = [-b ± √D] / (2a)`,
            explanation: "The quadratic formula gives us the solutions to any quadratic equation"
          });
          
          steps.push({
            operation: `First solution: ${variable} = [${-b} + √${discriminant}] / ${2*a} = ${x1.toFixed(4)}`,
            explanation: "Using the positive branch of the quadratic formula"
          });
          
          steps.push({
            operation: `Second solution: ${variable} = [${-b} - √${discriminant}] / ${2*a} = ${x2.toFixed(4)}`,
            explanation: "Using the negative branch of the quadratic formula"
          });
          
          return {
            problem: problem,
            concepts: ["Algebra", "Quadratic Equation", "Quadratic Formula"],
            solutionExplanation: "We'll solve this quadratic equation using the quadratic formula, which works for any quadratic equation in the form ax² + bx + c = 0.",
            steps: steps,
            answer: variable + " = " + x1.toFixed(4) + " or " + variable + " = " + x2.toFixed(4)
          };
        }
      }
      
      // Area of circle
      const circleAreaMatch = problem.match(/area.*circle.*radius.*(\d+)/i);
      if (circleAreaMatch) {
        const radius = parseInt(circleAreaMatch[1]);
        const area = Math.PI * radius * radius;
        
        const steps = [
          {
            operation: "Recall the formula for area of a circle: A = πr²",
            explanation: "The area of a circle is always π times the radius squared"
          },
          {
            operation: `Substitute the given radius: r = ${radius}`,
            explanation: "We plug in the known value into our formula"
          },
          {
            operation: `Calculate: A = π × (${radius})² = π × ${radius*radius}`,
            explanation: "First we square the radius, then multiply by π"
          },
          {
            operation: `If using π ≈ 3.1416: A ≈ 3.1416 × ${radius*radius} = ${area.toFixed(4)}`,
            explanation: "For a numerical approximation, we use the value of π"
          }
        ];
        
        return {
          problem: problem,
          concepts: ["Geometry", "Circle", "Area"],
          solutionExplanation: "The area of a circle is calculated using the formula A = πr², where r is the radius and π is a mathematical constant approximately equal to 3.1416.",
          steps: steps,
          answer: `Area = ${radius*radius}π ≈ ${area.toFixed(4)} square units`
        };
      }
      
      // Perimeter of rectangle
      const rectanglePerimeterMatch = problem.match(/perimeter.*rectangle.*(\d+).*(\d+)/i);
      if (rectanglePerimeterMatch) {
        const length = parseInt(rectanglePerimeterMatch[1]);
        const width = parseInt(rectanglePerimeterMatch[2]);
        const perimeter = 2 * (length + width);
        
        const steps = [
          {
            operation: "Recall the formula for perimeter of a rectangle: P = 2(l + w)",
            explanation: "The perimeter is the sum of all sides, which for a rectangle is twice the length plus twice the width"
          },
          {
            operation: `Substitute the given values: l = ${length}, w = ${width}`,
            explanation: "We plug in the known measurements into our formula"
          },
          {
            operation: `Calculate: P = 2(${length} + ${width}) = 2 × ${length+width}`,
            explanation: "First we add the length and width, then multiply by 2"
          },
          {
            operation: `Final calculation: P = ${perimeter}`,
            explanation: "After performing the multiplication, we get the perimeter"
          }
        ];
        
        return {
          problem: problem,
          concepts: ["Geometry", "Rectangle", "Perimeter"],
          solutionExplanation: "The perimeter of a rectangle is calculated using the formula P = 2(l + w), where l is the length and w is the width.",
          steps: steps,
          answer: `Perimeter = ${perimeter} units`
        };
      }
      
      // Trigonometric functions
      const trigMatch = problem.match(/(sin|cos|tan)\((\d+)°\)/i);
      if (trigMatch) {
        const func = trigMatch[1].toLowerCase();
        const angle = parseInt(trigMatch[2]);
        let value;
        let explanation;
        
        switch(func) {
          case "sin":
            value = Math.sin(angle * Math.PI / 180);
            explanation = "Sine of an angle in a right triangle is the ratio of the opposite side to the hypotenuse";
            break;
          case "cos":
            value = Math.cos(angle * Math.PI / 180);
            explanation = "Cosine of an angle in a right triangle is the ratio of the adjacent side to the hypotenuse";
            break;
          case "tan":
            value = Math.tan(angle * Math.PI / 180);
            explanation = "Tangent of an angle in a right triangle is the ratio of the opposite side to the adjacent side";
            break;
        }
        
        const steps = [
          {
            operation: `Convert degrees to radians: ${angle}° × π/180 = ${(angle * Math.PI / 180).toFixed(4)} radians`,
            explanation: "Trigonometric functions in mathematics typically use radians rather than degrees"
          },
          {
            operation: `Use ${func} function definition: ${func}(${angle}°)`,
            explanation: explanation
          },
          {
            operation: `Calculate ${func}(${angle}°) = ${value.toFixed(4)}`,
            explanation: "The value can be found using known trigonometric values or a calculator"
          }
        ];
        
        // Add special cases for common angles
        if ([0, 30, 45, 60, 90].includes(angle)) {
          steps.push({
            operation: `Note: ${angle}° is a special angle with an exact trigonometric value`,
            explanation: "Special angles have values that can be expressed exactly without decimals"
          });
        }
        
        return {
          problem: problem,
          concepts: ["Trigonometry", "Right Triangle", "Unit Circle"],
          solutionExplanation: `We'll find the ${func} of ${angle} degrees using trigonometric definitions. Note that trigonometric functions typically use radians, so we first convert degrees to radians by multiplying by π/180.`,
          steps: steps,
          answer: `${func}(${angle}°) = ${value.toFixed(4)}`
        };
      }
      
      // If no pattern matches, try to evaluate as a math expression
      try {
        const result = math.evaluate(problem);
        return {
          problem: problem,
          concepts: ["Calculation", "Expression Evaluation"],
          solutionExplanation: "We'll evaluate the mathematical expression using standard order of operations (PEMDAS/BODMAS): Parentheses, Exponents, Multiplication and Division (left to right), Addition and Subtraction (left to right).",
          steps: [
            {
              operation: "Original expression: " + problem,
              explanation: "This is a mathematical expression that needs to be evaluated"
            },
            {
              operation: "Following order of operations (PEMDAS/BODMAS)",
              explanation: "1. Parentheses, 2. Exponents, 3. Multiplication/Division, 4. Addition/Subtraction"
            },
            {
              operation: "Calculate step by step: " + problem,
              explanation: "Working through the expression following the order of operations"
            },
            {
              operation: "Final result: " + result,
              explanation: "After evaluating all operations, we arrive at the final value"
            }
          ],
          answer: problem + " = " + result
        };
      } catch (e) {
        throw new Error("Cannot solve this problem");
      }
    }
  </script>
</body>
</html>



































VIdeo Converter : 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DocToVideo - Document to Explanatory Video Generator</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #4361ee;
            --primary-dark: #3a56d4;
            --secondary: #7209b7;
            --accent: #f72585;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --success: #4cc9f0;
            --warning: #f9c74f;
            --error: #f94144;
            --radius: 12px;
            --shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #e4e7ec 100%);
            color: var(--dark);
            line-height: 1.6;
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1000px;
            margin: 40px auto;
            background: #fff;
            padding: 30px;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
        }

        header {
            text-align: center;
            margin-bottom: 30px;
        }

        h1 {
            font-size: 32px;
            color: var(--primary);
            margin-bottom: 10px;
        }

        .subtitle {
            color: var(--gray);
            font-size: 18px;
            margin-bottom: 20px;
        }

        .upload-area {
            border: 2px dashed var(--gray);
            border-radius: var(--radius);
            padding: 40px 20px;
            text-align: center;
            margin-bottom: 25px;
            transition: var(--transition);
            cursor: pointer;
            position: relative;
        }

        .upload-area:hover {
            border-color: var(--primary);
            background-color: rgba(67, 97, 238, 0.05);
        }

        .upload-area i {
            font-size: 48px;
            color: var(--primary);
            margin-bottom: 15px;
        }

        .upload-text {
            font-size: 18px;
            font-weight: 500;
            margin-bottom: 10px;
        }

        .upload-subtext {
            color: var(--gray);
            font-size: 14px;
        }

        #file-input {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            opacity: 0;
            cursor: pointer;
        }

        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            padding: 14px 28px;
            background: linear-gradient(to right, var(--primary), var(--primary-dark));
            color: white;
            border: none;
            border-radius: var(--radius);
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            box-shadow: 0 4px 6px rgba(67, 97, 238, 0.25);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(67, 97, 238, 0.3);
        }

        .btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none;
        }

        .btn-secondary {
            background: white;
            color: var(--primary);
            border: 2px solid var(--primary);
        }

        .btn-secondary:hover {
            background: rgba(67, 97, 238, 0.05);
        }

        .status-indicator {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 12px 20px;
            background: #f3f4f6;
            border-radius: 8px;
            margin-top: 20px;
            font-size: 14px;
        }

        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: var(--gray);
        }

        .status-dot.processing {
            background: var(--warning);
            animation: pulse 1.5s infinite;
        }

        .status-dot.success {
            background: var(--success);
            box-shadow: 0 0 0 3px rgba(76, 201, 240, 0.2);
        }

        .status-dot.error {
            background: var(--error);
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .loading {
            display: none;
            text-align: center;
            padding: 30px 0;
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #f3f4f6;
            border-top: 5px solid var(--primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 16px 24px;
            background: white;
            border-radius: 8px;
            box-shadow: var(--shadow);
            display: flex;
            align-items: center;
            gap: 12px;
            transform: translateX(150%);
            transition: transform 0.3s ease;
            z-index: 1000;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification-icon {
            font-size: 20px;
        }

        .notification.success {
            border-left: 4px solid var(--success);
        }

        .notification.error {
            border-left: 4px solid var(--error);
        }

        .video-preview {
            width: 100%;
            border-radius: var(--radius);
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            margin-top: 20px;
            display: none;
        }

        .video-preview video {
            width: 100%;
            display: block;
        }

        .options-panel {
            margin: 20px 0;
            padding: 20px;
            border: 1px solid #e5e7eb;
            border-radius: var(--radius);
            background-color: #f9fafb;
        }

        .option-label {
            display: block;
            font-weight: 600;
            margin-bottom: 8px;
        }

        .option-group {
            margin-bottom: 15px;
        }

        select, input {
            padding: 10px;
            border: 1px solid #e5e7eb;
            border-radius: 6px;
            width: 100%;
            font-size: 16px;
        }

        .progress-bar {
            height: 6px;
            background: #e5e7eb;
            border-radius: 3px;
            margin: 15px 0;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(to right, var(--primary), var(--secondary));
            width: 0%;
            transition: width 0.5s ease;
            border-radius: 3px;
        }

        .text-preview {
            margin-top: 20px;
            padding: 20px;
            background: #f3f4f6;
            border-radius: var(--radius);
            max-height: 200px;
            overflow-y: auto;
            display: none;
        }

        .text-preview h3 {
            margin-bottom: 10px;
            color: var(--primary);
        }

        .video-simulation {
            margin-top: 20px;
            padding: 20px;
            background: #000;
            border-radius: var(--radius);
            color: white;
            font-family: 'Courier New', monospace;
            height: 300px;
            overflow: hidden;
            position: relative;
            display: none;
        }

        .simulation-content {
            position: absolute;
            width: 100%;
            height: 100%;
            padding: 20px;
            animation: scroll-up 30s linear infinite;
        }

        @keyframes scroll-up {
            0% { transform: translateY(100%); }
            100% { transform: translateY(-100%); }
        }

        .simulation-slide {
            margin-bottom: 40px;
            padding: 20px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
        }

        .simulation-title {
            font-size: 24px;
            color: var(--success);
            margin-bottom: 15px;
        }

        .simulation-bullet {
            margin: 10px 0;
            padding-left: 20px;
            position: relative;
        }

        .simulation-bullet:before {
            content: "•";
            position: absolute;
            left: 0;
            color: var(--accent);
        }

        @media (max-width: 768px) {
            .container {
                padding: 20px;
                margin: 20px auto;
            }
            
            h1 {
                font-size: 24px;
            }
            
            .upload-area {
                padding: 20px 10px;
            }

            .video-simulation {
                height: 200px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>📹 Document to Explanatory Video Generator</h1>
            <p class="subtitle">Upload any document and get an animated explanatory video</p>
        </header>
       
        <div class="upload-area" id="upload-area">
            <i class="fas fa-cloud-upload-alt"></i>
            <div class="upload-text">Drag & Drop your files here</div>
            <div class="upload-subtext">Supports PDF, DOCX, TXT, JPG, PNG and other formats</div>
            <input type="file" id="file-input" accept=".pdf,.docx,.txt,.jpg,.jpeg,.png" />
        </div>

        <div class="options-panel">
            <div class="option-group">
                <label class="option-label">Video Style:</label>
                <select id="video-style">
                    <option value="educational">Educational/Explanatory</option>
                    <option value="professional">Professional Presentation</option>
                    <option value="animated">Animated Whiteboard</option>
                    <option value="minimalist">Minimalist Design</option>
                </select>
            </div>
            
            <div class="option-group">
                <label class="option-label">Video Duration:</label>
                <select id="video-duration">
                    <option value="short">Short (30-60 seconds)</option>
                    <option value="medium" selected>Medium (1-2 minutes)</option>
                    <option value="long">Long (2-5 minutes)</option>
                </select>
            </div>
            
            <div class="option-group">
                <label class="option-label">Voiceover:</label>
                <select id="voiceover">
                    <option value="male">Male Voice</option>
                    <option value="female">Female Voice</option>
                    <option value="none">No Voiceover</option>
                </select>
            </div>
        </div>

        <button class="btn" id="generate-btn" disabled>
            <i class="fas fa-video"></i> Generate Explanatory Video
        </button>

        <button class="btn btn-secondary" id="clear-btn">
            <i class="fas fa-trash"></i> Clear
        </button>

        <div class="loading" id="loading">
            <div class="loading-spinner"></div>
            <p>Generating your video... This may take a few minutes</p>
            <p id="progress-text">Processing document content...</p>
            <div class="progress-bar">
                <div class="progress-fill" id="progress-fill"></div>
            </div>
        </div>

        <div class="status-indicator">
            <div class="status-dot" id="status-dot"></div>
            <span id="status-text">Select a document to begin</span>
        </div>

        <div id="file-preview" style="display: none; margin-top: 20px;">
            <h3>Selected File:</h3>
            <div id="file-info" style="padding: 10px; background: #f3f4f6; border-radius: 8px; margin-top: 10px;"></div>
        </div>

        <div class="text-preview" id="text-preview">
            <h3>Extracted Text:</h3>
            <div id="extracted-text"></div>
        </div>

        <div class="video-simulation" id="video-simulation">
            <div class="simulation-content" id="simulation-content">
                <!-- Content will be generated dynamically -->
            </div>
        </div>

        <div class="video-preview" id="video-preview">
            <h3>Generated Video:</h3>
            <video controls id="output-video">
                Your browser does not support the video tag.
            </video>
            <div style="margin-top: 15px;">
                <button class="btn" id="download-btn">
                    <i class="fas fa-download"></i> Download Video
                </button>
            </div>
        </div>
    </div>

    <div class="notification" id="notification">
        <i class="notification-icon" id="notification-icon"></i>
        <div id="notification-text"></div>
    </div>

    <script>
        // DOM Elements
        const fileInput = document.getElementById('file-input');
        const generateBtn = document.getElementById('generate-btn');
        const clearBtn = document.getElementById('clear-btn');
        const loading = document.getElementById('loading');
        const progressText = document.getElementById('progress-text');
        const progressFill = document.getElementById('progress-fill');
        const statusDot = document.getElementById('status-dot');
        const statusText = document.getElementById('status-text');
        const filePreview = document.getElementById('file-preview');
        const fileInfo = document.getElementById('file-info');
        const textPreview = document.getElementById('text-preview');
        const extractedText = document.getElementById('extracted-text');
        const videoPreview = document.getElementById('video-preview');
        const outputVideo = document.getElementById('output-video');
        const downloadBtn = document.getElementById('download-btn');
        const notification = document.getElementById('notification');
        const notificationIcon = document.getElementById('notification-icon');
        const notificationText = document.getElementById('notification-text');
        const videoSimulation = document.getElementById('video-simulation');
        const simulationContent = document.getElementById('simulation-content');

        // Variables
        let currentFile = null;
        let processingInterval = null;
        let extractedContent = "";

        // Event Listeners
        fileInput.addEventListener('change', handleFileSelect);
        generateBtn.addEventListener('click', generateVideo);
        clearBtn.addEventListener('click', clearAll);
        downloadBtn.addEventListener('click', downloadVideo);

        // Drag and drop functionality
        const uploadArea = document.getElementById('upload-area');
       
        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.style.borderColor = 'var(--primary)';
            uploadArea.style.backgroundColor = 'rgba(67, 97, 238, 0.05)';
        });

        uploadArea.addEventListener('dragleave', () => {
            uploadArea.style.borderColor = 'var(--gray)';
            uploadArea.style.backgroundColor = 'transparent';
        });

        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.style.borderColor = 'var(--gray)';
            uploadArea.style.backgroundColor = 'transparent';
           
            if (e.dataTransfer.files.length) {
                fileInput.files = e.dataTransfer.files;
                handleFileSelect({ target: fileInput });
            }
        });

        function handleFileSelect(e) {
            const file = e.target.files[0];
            if (!file) return;

            // Check if file type is supported
            const fileExtension = file.name.split('.').pop().toLowerCase();
            const supportedTypes = ['pdf', 'docx', 'txt', 'jpg', 'jpeg', 'png'];
            
            if (!supportedTypes.includes(fileExtension)) {
                showNotification('Please select a supported file type (PDF, DOCX, TXT, JPG, PNG)', 'error');
                return;
            }

            currentFile = file;
           
            // Update status
            statusDot.className = 'status-dot';
            statusText.textContent = `File selected: ${file.name}`;
           
            // Enable generate button
            generateBtn.disabled = false;
           
            // Show file preview
            showFileInfo();
            
            // Extract text from file (simulated)
            extractTextFromFile(file);
            
            // Show success notification
            showNotification('File uploaded successfully!', 'success');
        }

        function showFileInfo() {
            const file = currentFile;
            const fileType = file.type || 'application/octet-stream';
            const fileSize = (file.size / (1024 * 1024)).toFixed(2); // Convert to MB
            
            fileInfo.innerHTML = `
                <strong>Name:</strong> ${file.name}<br>
                <strong>Type:</strong> ${fileType}<br>
                <strong>Size:</strong> ${fileSize} MB
            `;
            
            filePreview.style.display = 'block';
        }

        function extractTextFromFile(file) {
            // This is a simulation - in a real app, you would use APIs to extract text
            const reader = new FileReader();
            
            reader.onload = function(e) {
                // Simulate different content based on file type
                const fileExtension = file.name.split('.').pop().toLowerCase();
                
                if (fileExtension === 'pdf') {
                    extractedContent = "Document Analysis Report\n\nIntroduction:\nThis document presents a comprehensive analysis of the current market trends. Our research indicates significant growth in the technology sector, particularly in artificial intelligence and machine learning applications.\n\nKey Findings:\n• Market growth of 15% year-over-year\n• Increased investment in AI startups\n• Growing demand for data scientists\n• Expansion of cloud computing infrastructure\n\nConclusion:\nThe technology sector continues to show strong growth potential, with AI and machine learning leading innovation across industries.";
                } else if (fileExtension === 'docx') {
                    extractedContent = "Business Proposal\n\nExecutive Summary:\nOur company offers innovative solutions to streamline business processes through automation. This proposal outlines our approach to implementing a customized workflow system that will reduce operational costs by up to 30%.\n\nSolution Overview:\n• Automated document processing\n• Real-time analytics dashboard\n• Customizable workflow templates\n• Integration with existing systems\n\nBenefits:\n• Increased efficiency\n• Reduced human error\n• Cost savings\n• Scalable architecture";
                } else if (fileExtension === 'txt') {
                    extractedContent = "Notes from Meeting - October 15, 2023\n\nAttendees: John Smith, Sarah Johnson, Michael Brown, Emily Davis\n\nAgenda Items:\n1. Quarterly performance review\n2. New product development update\n3. Marketing strategy for Q4\n4. Budget planning for next year\n\nAction Items:\n- John to finalize performance metrics by Friday\n- Sarah to present product demo next week\n- Michael to prepare marketing campaign proposals\n- Emily to draft budget proposal";
                } else if (fileExtension === 'jpg' || fileExtension === 'jpeg' || fileExtension === 'png') {
                    extractedContent = "Image Analysis Results\n\nDetected Content:\n- Business presentation slide\n- Chart showing quarterly growth\n- Key performance indicators\n- Project timeline visualization\n\nExtracted Text:\n'Q3 Performance Review'\n'Revenue Growth: +18%'\n'Customer Acquisition: +25%'\n'New Markets: Asia-Pacific region'";
                } else {
                    extractedContent = "Document Content:\n\nThis is a simulated extraction of text content from your uploaded document. The system has analyzed the document structure and identified key sections, including an introduction, main content areas, and conclusions. Important points have been highlighted for video generation.";
                }
                
                // Show extracted text
                extractedText.textContent = extractedContent;
                textPreview.style.display = 'block';
            };
            
            reader.readAsDataURL(file); // In a real app, you would use text extraction methods
        }

        function generateVideo() {
            if (!currentFile) return;
           
            // Show loading state
            loading.style.display = 'block';
            generateBtn.disabled = true;
            statusDot.className = 'status-dot processing';
            statusText.textContent = 'Generating video...';
           
            // Get selected options
            const videoStyle = document.getElementById('video-style').value;
            const videoDuration = document.getElementById('video-duration').value;
            const voiceover = document.getElementById('voiceover').value;
           
            // Simulate processing steps
            simulateVideoGeneration(videoStyle, videoDuration, voiceover);
        }

        function simulateVideoGeneration(style, duration, voice) {
            // Reset progress
            progressFill.style.width = '0%';
            
            // Step 1: Extract text from document
            progressText.textContent = "Extracting text from document...";
            simulateProgress(20, 2000, () => {
                // Step 2: Process text content
                progressText.textContent = "Analyzing content structure...";
                simulateProgress(40, 2500, () => {
                    // Step 3: Generate visuals based on content
                    progressText.textContent = "Creating visual elements...";
                    simulateProgress(60, 3000, () => {
                        // Step 4: Add animations based on content
                        progressText.textContent = "Adding animations and transitions...";
                        simulateProgress(80, 3500, () => {
                            // Step 5: Final rendering with content-based video
                            progressText.textContent = "Finalizing video...";
                            simulateProgress(100, 2000, () => {
                                // Complete
                                finishVideoGeneration();
                            });
                        });
                    });
                });
            });
        }

        function simulateProgress(target, duration, callback) {
            let startWidth = parseInt(progressFill.style.width) || 0;
            let increment = (target - startWidth) / (duration / 50);
            let currentWidth = startWidth;
            
            const interval = setInterval(() => {
                currentWidth += increment;
                progressFill.style.width = `${Math.min(currentWidth, target)}%`;
                
                if (currentWidth >= target) {
                    clearInterval(interval);
                    if (callback) callback();
                }
            }, 50);
        }

        function finishVideoGeneration() {
            // Hide loading
            loading.style.display = 'none';
            
            // Update status
            statusDot.className = 'status-dot success';
            statusText.textContent = 'Video generated successfully!';
            
            // Create video simulation based on extracted content
            createVideoSimulation();
            
            // Show video preview
            outputVideo.src = "https://storage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4";
            videoPreview.style.display = 'block';
            
            // Show success notification
            showNotification('Your video has been generated successfully!', 'success');
        }

        function createVideoSimulation() {
            // Clear previous simulation
            simulationContent.innerHTML = '';
            
            // Create slides based on extracted content
            const lines = extractedContent.split('\n');
            let currentSlide = null;
            
            lines.forEach(line => {
                if (line.trim() === '') return;
                
                // Create a new slide for headings
                if (line.includes(':') || line.match(/^[A-Z][a-zA-Z\s]+$/) && line.length < 30) {
                    if (currentSlide) {
                        simulationContent.appendChild(currentSlide);
                    }
                    
                    currentSlide = document.createElement('div');
                    currentSlide.className = 'simulation-slide';
                    
                    const title = document.createElement('div');
                    title.className = 'simulation-title';
                    title.textContent = line;
                    currentSlide.appendChild(title);
                } 
                // Add bullet points
                else if (line.trim().startsWith('•') || line.trim().startsWith('-')) {
                    if (!currentSlide) {
                        currentSlide = document.createElement('div');
                        currentSlide.className = 'simulation-slide';
                    }
                    
                    const bullet = document.createElement('div');
                    bullet.className = 'simulation-bullet';
                    bullet.textContent = line.trim().substring(1).trim();
                    currentSlide.appendChild(bullet);
                }
                // Add regular content
                else {
                    if (!currentSlide) {
                        currentSlide = document.createElement('div');
                        currentSlide.className = 'simulation-slide';
                    }
                    
                    const content = document.createElement('div');
                    content.textContent = line;
                    currentSlide.appendChild(content);
                }
            });
            
            // Add the last slide
            if (currentSlide) {
                simulationContent.appendChild(currentSlide);
            }
            
            // Show the simulation
            videoSimulation.style.display = 'block';
        }

        function downloadVideo() {
            // This would download the actual generated video in a real application
            showNotification('Video download started!', 'success');
            
            // Simulate download
            setTimeout(() => {
                showNotification('Video downloaded successfully!', 'success');
            }, 2000);
        }

        function clearAll() {
            // Reset everything
            fileInput.value = '';
            currentFile = null;
            generateBtn.disabled = true;
            loading.style.display = 'none';
            filePreview.style.display = 'none';
            textPreview.style.display = 'none';
            videoPreview.style.display = 'none';
            videoSimulation.style.display = 'none';
            statusDot.className = 'status-dot';
            statusText.textContent = 'Select a document to begin';
            progressFill.style.width = '0%';
            extractedContent = "";
            simulationContent.innerHTML = '';
            
            showNotification('All fields have been cleared', 'success');
        }

        function showNotification(message, type) {
            notification.className = 'notification ' + type;
            notificationIcon.className = 'notification-icon ' + (type === 'success' ? 'fas fa-check-circle' : 'fas fa-exclamation-circle');
            notificationText.textContent = message;
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }
    </script>
</body>
</html>










Attention : 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Focus Friend - Interactive Attention Catcher</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Comic Sans MS', cursive, sans-serif;
            background: linear-gradient(135deg, #e0f7fa 0%, #bbdefb 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .container {
            max-width: 900px;
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            text-align: center;
            padding: 30px;
            position: relative;
        }

        h1 {
            color: #ff6b6b;
            font-size: 2.5rem;
            margin-bottom: 20px;
            text-shadow: 2px 2px 0px #ffe66d;
        }

        .attention-box {
            background: linear-gradient(135deg, #4ecdc4 0%, #6a89cc 100%);
            border-radius: 15px;
            padding: 30px;
            margin: 20px 0;
            color: white;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .attention-text {
            font-size: 1.5rem;
            margin-bottom: 20px;
            font-weight: bold;
        }

        .animation-area {
            height: 200px;
            position: relative;
            margin: 30px 0;
            overflow: hidden;
            border-radius: 15px;
            background: #f7f9fc;
        }

        .character {
            position: absolute;
            font-size: 4rem;
            animation: bounce 2s infinite alternate;
        }

        .character-1 {
            top: 30px;
            left: 20%;
            color: #ff9a8b;
            animation-delay: 0.2s;
        }

        .character-2 {
            top: 50px;
            left: 50%;
            color: #8fd3f4;
            animation-delay: 0.4s;
        }

        .character-3 {
            top: 40px;
            left: 80%;
            color: #a3de83;
            animation-delay: 0.6s;
        }

        .bubble {
            position: absolute;
            background: white;
            border-radius: 50%;
            opacity: 0.7;
            animation: float 8s infinite ease-in-out;
        }

        .bubble-1 {
            width: 30px;
            height: 30px;
            top: 10%;
            left: 10%;
            animation-delay: 0s;
            background: #ffaaa5;
        }

        .bubble-2 {
            width: 20px;
            height: 20px;
            top: 20%;
            left: 30%;
            animation-delay: 1s;
            background: #a3de83;
        }

        .bubble-3 {
            width: 40px;
            height: 40px;
            top: 15%;
            left: 60%;
            animation-delay: 2s;
            background: #8fd3f4;
        }

        .bubble-4 {
            width: 25px;
            height: 25px;
            top: 5%;
            left: 80%;
            animation-delay: 3s;
            background: #ffd5a4;
        }

        .btn {
            background: linear-gradient(to right, #ff6b6b, #ff9a8b);
            color: white;
            border: none;
            padding: 15px 30px;
            font-size: 1.2rem;
            border-radius: 50px;
            cursor: pointer;
            margin: 10px;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(255, 107, 107, 0.4);
        }

        .btn:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(255, 107, 107, 0.6);
        }

        .btn-secondary {
            background: linear-gradient(to right, #4ecdc4, #6a89cc);
            box-shadow: 0 5px 15px rgba(78, 205, 196, 0.4);
        }

        .btn-secondary:hover {
            box-shadow: 0 8px 20px rgba(78, 205, 196, 0.6);
        }

        .instructions {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 15px;
            margin: 20px 0;
            text-align: left;
        }

        .instructions h2 {
            color: #4ecdc4;
            margin-bottom: 10px;
        }

        .instructions ul {
            padding-left: 20px;
        }

        .instructions li {
            margin-bottom: 10px;
        }

        .attention-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.5s ease;
        }

        .attention-modal.active {
            opacity: 1;
            visibility: visible;
        }

        .modal-content {
            background: white;
            width: 90%;
            max-width: 500px;
            border-radius: 20px;
            padding: 30px;
            text-align: center;
            position: relative;
            transform: scale(0.7);
            transition: transform 0.5s ease;
        }

        .attention-modal.active .modal-content {
            transform: scale(1);
        }

        .close-modal {
            position: absolute;
            top: 15px;
            right: 15px;
            font-size: 1.5rem;
            color: #ff6b6b;
            cursor: pointer;
            background: none;
            border: none;
        }

        .modal-animation {
            height: 200px;
            position: relative;
            margin: 20px 0;
        }

        .modal-character {
            font-size: 5rem;
            color: #ff6b6b;
            animation: pulse 1.5s infinite alternate, rotate 4s infinite linear;
        }

        .modal-text {
            font-size: 1.8rem;
            color: #ff6b6b;
            margin: 20px 0;
            font-weight: bold;
            animation: colorChange 3s infinite alternate;
        }

        .quiz-container {
            background: #f0f7ff;
            padding: 20px;
            border-radius: 15px;
            margin: 20px 0;
            text-align: center;
        }

        .quiz-question {
            font-size: 1.4rem;
            color: #4a5568;
            margin-bottom: 20px;
        }

        .quiz-options {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }

        .quiz-option {
            background: white;
            padding: 15px;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid #cbd5e0;
        }

        .quiz-option:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            border-color: #4ecdc4;
        }

        .quiz-option.correct {
            background: #c6f6d5;
            border-color: #48bb78;
        }

        .quiz-option.incorrect {
            background: #fed7d7;
            border-color: #f56565;
        }

        .quiz-feedback {
            font-size: 1.2rem;
            font-weight: bold;
            margin: 15px 0;
            min-height: 30px;
        }

        .animation-controls {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin: 20px 0;
        }

        .animation-btn {
            padding: 10px 20px;
            background: #4ecdc4;
            color: white;
            border: none;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .animation-btn:hover {
            background: #38b2ac;
        }

        /* Animations */
        @keyframes bounce {
            0% {
                transform: translateY(0);
            }
            100% {
                transform: translateY(-20px);
            }
        }

        @keyframes float {
            0%, 100% {
                transform: translateY(0) translateX(0);
            }
            25% {
                transform: translateY(-20px) translateX(10px);
            }
            50% {
                transform: translateY(-40px) translateX(-10px);
            }
            75% {
                transform: translateY(-20px) translateX(-20px);
            }
        }

        @keyframes pulse {
            0% {
                transform: scale(1);
            }
            100% {
                transform: scale(1.1);
            }
        }

        @keyframes rotate {
            0% {
                transform: rotate(0deg);
            }
            100% {
                transform: rotate(360deg);
            }
        }

        @keyframes colorChange {
            0% {
                color: #ff6b6b;
            }
            33% {
                color: #4ecdc4;
            }
            66% {
                color: #ffe66d;
            }
            100% {
                color: #6a89cc;
            }
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-10px); }
            75% { transform: translateX(10px); }
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @keyframes fly {
            0% { transform: translate(0, 0) rotate(0deg); }
            50% { transform: translate(200px, -50px) rotate(180deg); }
            100% { transform: translate(0, 0) rotate(360deg); }
        }

        @media (max-width: 768px) {
            h1 {
                font-size: 2rem;
            }
            
            .attention-text {
                font-size: 1.2rem;
            }
            
            .character {
                font-size: 3rem;
            }
            
            .btn {
                padding: 12px 25px;
                font-size: 1rem;
            }
            
            .quiz-options {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🌟 Focus Friend 🌟</h1>
        
        <div class="attention-box">
            <p class="attention-text">Let's focus together! Try different animations or take a fun quiz!</p>
        </div>
        
        <div class="animation-area" id="animation-area">
            <div class="character character-1">🐶</div>
            <div class="character character-2">🐱</div>
            <div class="character character-3">🐼</div>
            
            <div class="bubble bubble-1"></div>
            <div class="bubble bubble-2"></div>
            <div class="bubble bubble-3"></div>
            <div class="bubble bubble-4"></div>
        </div>
        
        <div class="animation-controls">
            <button class="animation-btn" id="bounce-btn">Bounce</button>
            <button class="animation-btn" id="spin-btn">Spin</button>
            <button class="animation-btn" id="fly-btn">Fly</button>
            <button class="animation-btn" id="pulse-btn">Pulse</button>
        </div>
        
        <button class="btn" id="attention-btn">
            <i class="fas fa-star"></i> Get Attention!
        </button>
        
        <button class="btn btn-secondary" id="quiz-btn">
            <i class="fas fa-question-circle"></i> Fun Quiz
        </button>
        
        <button class="btn btn-secondary" id="info-btn">
            <i class="fas fa-info-circle"></i> How This Helps
        </button>
        
        <div class="instructions" id="instructions" style="display: none;">
            <h2>How This Attention Catcher Helps</h2>
            <ul>
                <li>🌈 Colorful animations stimulate visual engagement</li>
                <li>🔄 Gentle, predictable movements provide comfort</li>
                <li>🎯 Clear focal points help direct attention</li>
                <li>😊 Friendly characters create positive associations</li>
                <li>🔊 Optional sound cues can be added for multi-sensory engagement</li>
            </ul>
        </div>
        
        <div class="quiz-container" id="quiz-container" style="display: none;">
            <div class="quiz-question" id="quiz-question">What animal says "meow"?</div>
            <div class="quiz-options">
                <div class="quiz-option" data-correct="false">🐶 Dog</div>
                <div class="quiz-option" data-correct="true">🐱 Cat</div>
                <div class="quiz-option" data-correct="false">🐮 Cow</div>
                <div class="quiz-option" data-correct="false">🐦 Bird</div>
            </div>
            <div class="quiz-feedback" id="quiz-feedback"></div>
            <button class="btn" id="next-question-btn">Next Question</button>
        </div>
    </div>
    
    <div class="attention-modal" id="attention-modal">
        <div class="modal-content">
            <button class="close-modal" id="close-modal">
                <i class="fas fa-times"></i>
            </button>
            
            <div class="modal-animation">
                <div class="modal-character">✨</div>
            </div>
            
            <p class="modal-text">Hello! Let's focus on this task together!</p>
            
            <button class="btn" id="modal-ok-btn">
                <i class="fas fa-thumbs-up"></i> I'm Ready to Focus!
            </button>
        </div>
    </div>

    <script>
        // DOM Elements
        const attentionBtn = document.getElementById('attention-btn');
        const infoBtn = document.getElementById('info-btn');
        const quizBtn = document.getElementById('quiz-btn');
        const instructions = document.getElementById('instructions');
        const quizContainer = document.getElementById('quiz-container');
        const attentionModal = document.getElementById('attention-modal');
        const closeModal = document.getElementById('close-modal');
        const modalOkBtn = document.getElementById('modal-ok-btn');
        const animationArea = document.getElementById('animation-area');
        const quizOptions = document.querySelectorAll('.quiz-option');
        const quizFeedback = document.getElementById('quiz-feedback');
        const nextQuestionBtn = document.getElementById('next-question-btn');
        const quizQuestion = document.getElementById('quiz-question');
        
        // Animation buttons
        const bounceBtn = document.getElementById('bounce-btn');
        const spinBtn = document.getElementById('spin-btn');
        const flyBtn = document.getElementById('fly-btn');
        const pulseBtn = document.getElementById('pulse-btn');
        
        // Characters in the animation area
        const characters = document.querySelectorAll('.character');
        
        // Quiz questions
        const questions = [
            {
                question: "What animal says 'meow'?",
                options: ["🐶 Dog", "🐱 Cat", "🐮 Cow", "🐦 Bird"],
                correctIndex: 1
            },
            {
                question: "Which color is a banana?",
                options: ["🔴 Red", "🟡 Yellow", "🔵 Blue", "🟢 Green"],
                correctIndex: 1
            },
            {
                question: "What do we use to see?",
                options: ["👂 Ears", "👀 Eyes", "👃 Nose", "✋ Hands"],
                correctIndex: 1
            },
            {
                question: "Which one is a fruit?",
                options: ["🥕 Carrot", "🍎 Apple", "🥦 Broccoli", "🥔 Potato"],
                correctIndex: 1
            }
        ];
        
        let currentQuestion = 0;
        
        // Event Listeners
        attentionBtn.addEventListener('click', showAttentionModal);
        infoBtn.addEventListener('click', toggleInstructions);
        quizBtn.addEventListener('click', toggleQuiz);
        closeModal.addEventListener('click', hideAttentionModal);
        modalOkBtn.addEventListener('click', hideAttentionModal);
        nextQuestionBtn.addEventListener('click', showNextQuestion);
        
        // Animation buttons
        bounceBtn.addEventListener('click', () => changeAnimation('bounce'));
        spinBtn.addEventListener('click', () => changeAnimation('spin'));
        flyBtn.addEventListener('click', () => changeAnimation('fly'));
        pulseBtn.addEventListener('click', () => changeAnimation('pulse'));
        
        // Add event listeners to quiz options
        quizOptions.forEach(option => {
            option.addEventListener('click', checkAnswer);
        });
        
        // Show attention modal
        function showAttentionModal() {
            attentionModal.classList.add('active');
            document.body.style.overflow = 'hidden'; // Prevent scrolling
        }
        
        // Hide attention modal
        function hideAttentionModal() {
            attentionModal.classList.remove('active');
            document.body.style.overflow = 'auto'; // Enable scrolling
        }
        
        // Toggle instructions visibility
        function toggleInstructions() {
            if (instructions.style.display === 'none') {
                instructions.style.display = 'block';
                quizContainer.style.display = 'none';
            } else {
                instructions.style.display = 'none';
            }
        }
        
        // Toggle quiz visibility
        function toggleQuiz() {
            if (quizContainer.style.display === 'none') {
                quizContainer.style.display = 'block';
                instructions.style.display = 'none';
                loadQuestion(currentQuestion);
            } else {
                quizContainer.style.display = 'none';
            }
        }
        
        // Load a quiz question
        function loadQuestion(index) {
            if (index >= questions.length) {
                // Reset if we've reached the end
                currentQuestion = 0;
                index = 0;
            }
            
            const question = questions[index];
            quizQuestion.textContent = question.question;
            
            // Reset options styling
            quizOptions.forEach((option, i) => {
                option.textContent = question.options[i];
                option.dataset.correct = (i === question.correctIndex).toString();
                option.classList.remove('correct', 'incorrect');
            });
            
            // Clear feedback
            quizFeedback.textContent = '';
        }
        
        // Check quiz answer
        function checkAnswer(event) {
            const selectedOption = event.target;
            const isCorrect = selectedOption.dataset.correct === 'true';
            
            // Disable further selections
            quizOptions.forEach(option => {
                option.removeEventListener('click', checkAnswer);
                if (option.dataset.correct === 'true') {
                    option.classList.add('correct');
                }
            });
            
            if (isCorrect) {
                selectedOption.classList.add('correct');
                quizFeedback.textContent = 'Correct! 🎉';
                quizFeedback.style.color = '#48bb78';
            } else {
                selectedOption.classList.add('incorrect');
                quizFeedback.textContent = 'Try again! 💪';
                quizFeedback.style.color = '#f56565';
                
                // Re-enable after a short delay
                setTimeout(() => {
                    quizOptions.forEach(option => {
                        option.addEventListener('click', checkAnswer);
                        option.classList.remove('correct', 'incorrect');
                    });
                    quizFeedback.textContent = '';
                }, 1500);
            }
        }
        
        // Show next question
        function showNextQuestion() {
            currentQuestion++;
            loadQuestion(currentQuestion);
            
            // Re-add event listeners
            quizOptions.forEach(option => {
                option.addEventListener('click', checkAnswer);
            });
        }
        
        // Change animation style
        function changeAnimation(animationType) {
            // Remove all animation classes first
            characters.forEach(character => {
                character.style.animation = 'none';
                
                // Reflow trick to restart animations
                void character.offsetWidth;
                
                // Apply new animation
                switch(animationType) {
                    case 'bounce':
                        character.style.animation = 'bounce 2s infinite alternate';
                        break;
                    case 'spin':
                        character.style.animation = 'spin 3s infinite linear';
                        break;
                    case 'fly':
                        character.style.animation = 'fly 4s infinite ease-in-out';
                        break;
                    case 'pulse':
                        character.style.animation = 'pulse 1.5s infinite alternate';
                        break;
                }
            });
        }
        
        // Initialize the page
        loadQuestion(currentQuestion);
    </script>
</body>
</html>






































Clam : 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Study & Wellness Toolkit</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #4361ee;
            --primary-dark: #3a56d4;
            --secondary: #7209b7;
            --accent: #f72585;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --success: #4cc9f0;
            --warning: #f9c74f;
            --error: #f94144;
            --radius: 12px;
            --shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
            --light-bg: #f8faff;
            --card-bg: #ffffff;
            --text: #223;
            --text-light: #6c757d;
            --border: #d9e6f9;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            color: #333;
            min-height: 100vh;
            padding: 0;
        }

        /* Header and Navigation */
        header {
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            color: white;
            padding: 15px 0;
            position: sticky;
            top: 0;
            z-index: 100;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .header-container {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 20px;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .logo i {
            font-size: 2rem;
        }

        .logo h1 {
            font-size: 1.8rem;
            font-weight: 700;
        }

        nav ul {
            display: flex;
            list-style: none;
            gap: 20px;
        }

        nav a {
            color: white;
            text-decoration: none;
            font-weight: 500;
            padding: 8px 15px;
            border-radius: 20px;
            transition: var(--transition);
        }

        nav a:hover, nav a.active {
            background: rgba(255, 255, 255, 0.2);
        }

        /* Main Content */
        .container {
            max-width: 1200px;
            margin: 30px auto;
            padding: 0 20px;
        }

        .section {
            background: white;
            border-radius: var(--radius);
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: var(--shadow);
            display: none;
        }

        .section.active {
            display: block;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .section-title {
            font-size: 1.8rem;
            color: var(--primary);
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #f0f0f0;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        /* Welcome Section */
        .welcome-section {
            text-align: center;
            padding: 40px 20px;
        }

        .welcome-section h2 {
            font-size: 2.5rem;
            color: var(--primary);
            margin-bottom: 20px;
        }

        .welcome-section p {
            font-size: 1.2rem;
            color: var(--gray);
            max-width: 800px;
            margin: 0 auto 30px;
            line-height: 1.6;
        }

        .tool-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }

        .tool-card {
            background: white;
            border-radius: var(--radius);
            padding: 25px;
            box-shadow: var(--shadow);
            transition: var(--transition);
            cursor: pointer;
            text-align: center;
        }

        .tool-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
        }

        .tool-card i {
            font-size: 3rem;
            color: var(--primary);
            margin-bottom: 15px;
        }

        .tool-card h3 {
            font-size: 1.5rem;
            margin-bottom: 10px;
            color: var(--dark);
        }

        .tool-card p {
            color: var(--gray);
            margin-bottom: 15px;
        }

        /* Footer */
        footer {
            background: var(--dark);
            color: white;
            text-align: center;
            padding: 20px;
            margin-top: 50px;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .header-container {
                flex-direction: column;
                gap: 15px;
            }
            
            nav ul {
                flex-wrap: wrap;
                justify-content: center;
            }
            
            .tool-cards {
                grid-template-columns: 1fr;
            }
        }

        /* Notification */
        .notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: #4caf50;
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            display: flex;
            align-items: center;
            gap: 10px;
            transform: translateY(100px);
            opacity: 0;
            transition: all 0.3s ease;
            z-index: 1000;
        }

        .notification.show {
            transform: translateY(0);
            opacity: 1;
        }

        .notification.error {
            background: var(--error);
        }

        /* Tabs for sections with multiple features */
        .tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            border-bottom: 1px solid var(--border);
            padding-bottom: 10px;
        }

        .tab {
            padding: 10px 20px;
            border-radius: 6px 6px 0 0;
            cursor: pointer;
            transition: var(--transition);
            border: 1px solid transparent;
        }

        .tab.active {
            border-color: var(--border);
            border-bottom-color: var(--card-bg);
            background: var(--card-bg);
            color: var(--primary);
            margin-bottom: -11px;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* Neurodevelopmental Self-Check Styles */
        .selection-panel {
            background: var(--light-bg);
            padding: 20px;
            border-radius: var(--radius);
            margin-bottom: 25px;
            box-shadow: var(--shadow);
        }

        .category-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 12px;
            margin: 15px 0;
        }

        .category-item {
            display: flex;
            align-items: center;
            padding: 10px 15px;
            background: var(--card-bg);
            border-radius: 8px;
            border: 1px solid var(--border);
            cursor: pointer;
            transition: all 0.3s;
        }

        .category-item:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow);
        }

        .category-item.selected {
            background: var(--primary);
            color: white;
            border-color: var(--primary-dark);
        }

        .category-item i {
            margin-right: 10px;
            font-size: 1.2rem;
        }

        select, .generate-btn {
            padding: 12px;
            border-radius: 8px;
            border: 1px solid var(--border);
            font-size: 1rem;
            margin: 10px 0;
            width: 100%;
        }

        .generate-btn {
            background: var(--primary);
            color: #fff;
            border: none;
            cursor: pointer;
            transition: 0.3s;
            font-weight: 600;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .generate-btn:hover {
            background: var(--primary-dark);
        }

        .generate-btn:disabled {
            background: #cccccc;
            cursor: not-allowed;
        }

        .quiz-container {
            display: none;
            margin-top: 20px;
        }

        .quiz-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .question-count {
            font-weight: 600;
            color: var(--text-light);
        }

        .question-card {
            background: var(--light-bg);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            padding: 20px;
            margin-bottom: 20px;
            transition: 0.3s;
            box-shadow: var(--shadow);
        }

        .question-card:hover {
            background: #f1f8ff;
        }

        .question-card h3 {
            margin: 0 0 8px 0;
            font-size: 1.05rem;
            color: var(--secondary);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .category-tag {
            display: inline-block;
            padding: 3px 10px;
            background: var(--primary);
            color: white;
            border-radius: 20px;
            font-size: 0.75rem;
            margin-left: 10px;
        }

        .options {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin-top: 15px;
        }

        .options button {
            flex: 1;
            min-width: 100px;
            background: #f1f5fb;
            border: 1px solid #c5d4f5;
            border-radius: 8px;
            padding: 10px 12px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: 0.3s;
        }

        .options button:hover {
            background: #dde8fb;
        }

        .options button.active {
            background: var(--primary);
            color: #fff;
            border: none;
        }

        .options button.active.never { background: #28a745; }
        .options button.active.sometimes { background: #ffc107; color: #000; }
        .options button.active.often { background: #fd7e14; }
        .options button.active.always { background: #dc3545; }

        .progress-container {
            margin: 25px 0;
        }

        .progress-text {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            font-size: 0.9rem;
            color: var(--text-light);
        }

        .progress {
            width: 100%;
            height: 12px;
            background: #e0e8f5;
            border-radius: 6px;
            overflow: hidden;
        }

        .progress-bar {
            height: 100%;
            width: 0;
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            border-radius: 6px;
            transition: width 0.4s;
        }

        .navigation-buttons {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

        .nav-btn {
            padding: 12px 20px;
            border-radius: 8px;
            border: none;
            font-size: 1rem;
            cursor: pointer;
            transition: 0.3s;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .prev-btn {
            background: #f8f9fa;
            color: var(--text);
            border: 1px solid var(--border);
        }

        .prev-btn:hover {
            background: #e9ecef;
        }

        .next-btn {
            background: var(--primary);
            color: white;
        }

        .next-btn:hover {
            background: var(--primary-dark);
        }

        .submit-btn {
            width: 100%;
            padding: 15px;
            background: var(--secondary);
            border: none;
            border-radius: 10px;
            font-size: 1.1rem;
            color: #fff;
            cursor: pointer;
            margin-top: 20px;
            transition: 0.3s;
            font-weight: 600;
        }

        .submit-btn:hover {
            background: #5d3d97;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            justify-content: center;
            align-items: center;
            z-index: 999;
            padding: 20px;
        }

        .modal-content {
            background: #fff;
            padding: 30px;
            border-radius: var(--radius);
            max-width: 800px;
            width: 100%;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            animation: fadeIn 0.4s ease;
        }

        .close-btn {
            position: absolute;
            top: 15px;
            right: 20px;
            background: none;
            border: none;
            font-size: 1.8rem;
            cursor: pointer;
            color: var(--text-light);
        }

        .result-header {
            text-align: center;
            margin-bottom: 25px;
            color: var(--secondary);
        }

        .result-summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .result-card {
            background: var(--light-bg);
            border-radius: var(--radius);
            padding: 20px;
            text-align: center;
            box-shadow: var(--shadow);
        }

        .result-card h3 {
            margin-bottom: 15px;
            color: var(--secondary);
        }

        .score-circle {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 15px;
            font-size: 1.8rem;
            font-weight: bold;
            position: relative;
        }

        .score-low { background: #e8f5e9; color: var(--success); border: 3px solid var(--success); }
        .score-medium { background: #fff8e1; color: var(--warning); border: 3px solid var(--warning); }
        .score-high { background: #ffebee; color: var(--error); border: 3px solid var(--error); }

        .bar {
            height: 12px;
            background: #e3e7ff;
            border-radius: 6px;
            overflow: hidden;
            margin: 8px 0;
        }

        .bar-fill {
            display: block;
            height: 100%;
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            width: 0;
            transition: width 0.6s;
        }

        .recommendations {
            margin-top: 30px;
        }

        .recommendation-card {
            background: var(--light-bg);
            border-left: 4px solid var(--primary);
            padding: 15px;
            margin-bottom: 15px;
            border-radius: 4px;
        }

        .resources-section {
            margin-top: 30px;
        }

        .resource-list {
            list-style: none;
        }

        .resource-list li {
            margin-bottom: 10px;
            padding-left: 25px;
            position: relative;
        }

        .resource-list li i {
            position: absolute;
            left: 0;
            top: 3px;
            color: var(--primary);
        }

        .print-btn {
            padding: 10px 20px;
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            margin-top: 20px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        /* Animation for questions */
        @keyframes slideIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .question-card {
            animation: slideIn 0.4s ease;
        }

        /* Tooltip */
        .tooltip {
            position: relative;
            display: inline-block;
            margin-left: 8px;
        }

        .tooltip i {
            color: var(--primary);
            font-size: 0.9rem;
        }

        .tooltip-text {
            visibility: hidden;
            width: 200px;
            background-color: #333;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 8px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 0.8rem;
            font-weight: normal;
        }

        .tooltip:hover .tooltip-text {
            visibility: visible;
            opacity: 1;
        }
        
        .info-text {
            background: #e8f4ff;
            padding: 12px;
            border-radius: 8px;
            margin: 15px 0;
            font-size: 0.9rem;
            border-left: 4px solid var(--primary);
        }

        /* AI Smart Notes Styles */
        .main-content {
            display: flex;
            gap: 30px;
        }

        @media (max-width: 900px) {
            .main-content {
                flex-direction: column;
            }
        }

        .input-section {
            flex: 1;
            background: var(--light-bg);
            border-radius: var(--radius);
            padding: 25px;
            box-shadow: var(--shadow);
        }

        .output-section {
            flex: 1;
            background: var(--light-bg);
            border-radius: var(--radius);
            padding: 25px;
            box-shadow: var(--shadow);
            display: flex;
            flex-direction: column;
        }

        .input-methods {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
        }

        .input-tab {
            padding: 10px 20px;
            background: #f0f5ff;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .input-tab.active {
            background: var(--primary);
            color: white;
        }

        textarea {
            width: 100%;
            height: 200px;
            padding: 15px;
            border: 1px solid var(--border);
            border-radius: 10px;
            resize: vertical;
            font-size: 1rem;
            line-height: 1.5;
            margin-bottom: 20px;
            transition: border-color 0.3s;
        }

        textarea:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 2px rgba(67, 97, 238, 0.2);
        }

        .upload-area {
            border: 2px dashed var(--primary);
            border-radius: 10px;
            padding: 30px;
            text-align: center;
            margin-bottom: 20px;
            background: #f9f9ff;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .upload-area.highlight {
            background: #f0f5ff;
            border-color: var(--primary-dark);
        }

        .upload-area i {
            font-size: 3rem;
            color: var(--primary);
            margin-bottom: 15px;
        }

        .upload-area p {
            color: var(--text-light);
            margin-bottom: 15px;
        }

        .upload-btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .upload-btn:hover {
            background: var(--primary-dark);
        }

        .file-info {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 12px 15px;
            background: #f0f5ff;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .file-info i {
            color: var(--primary);
            font-size: 1.5rem;
        }

        .file-details {
            flex: 1;
        }

        .file-name {
            font-weight: 600;
            margin-bottom: 5px;
        }

        .file-size {
            color: var(--text-light);
            font-size: 0.9rem;
        }

        .remove-btn {
            color: var(--error);
            cursor: pointer;
            font-size: 1.2rem;
        }

        .notes-generate-btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 15px 25px;
            border-radius: 10px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            transition: all 0.3s ease;
            width: 100%;
        }

        .notes-generate-btn:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
        }

        .notes-generate-btn:active {
            transform: translateY(0);
        }

        .notes-list {
            flex: 1;
            overflow-y: auto;
            margin-bottom: 20px;
            max-height: 400px;
        }

        .note-item {
            background: #f9f9ff;
            padding: 15px;
            margin-bottom: 15px;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            border-left: 4px solid var(--primary);
            display: flex;
            align-items: flex-start;
            gap: 10px;
        }

        .note-item i {
            color: var(--primary);
            margin-top: 4px;
            flex-shrink: 0;
        }

        .note-text {
            font-size: 1rem;
            line-height: 1.5;
            color: var(--text);
        }

        .empty-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 200px;
            color: var(--text-light);
            text-align: center;
        }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 15px;
            color: #d0d0d0;
        }

        .action-buttons {
            display: flex;
            gap: 15px;
        }

        .action-btn {
            flex: 1;
            padding: 12px 20px;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            transition: all 0.3s ease;
        }

        .copy-btn {
            background: var(--primary);
            color: white;
            border: none;
        }

        .copy-btn:hover {
            background: var(--primary-dark);
        }

        .download-btn {
            background: #f0f0f0;
            color: #555;
            border: none;
        }

        .download-btn:hover {
            background: #e0e0e0;
        }

        .ai-badge {
            display: inline-block;
            background: linear-gradient(135deg, var(--accent) 0%, #ff8e53 100%);
            color: white;
            padding: 4px 10px;
            border-radius: 50px;
            font-size: 0.8rem;
            font-weight: 600;
            margin-left: 10px;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Responsive adjustments for self-check tool */
        @media (max-width: 768px) {
            .options {
                flex-direction: column;
            }
            
            .options button {
                width: 100%;
            }
            
            .category-grid {
                grid-template-columns: 1fr;
            }
            
            .result-summary {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Header with Navigation -->
    <header>
        <div class="header-container">
            <div class="logo">
                <i class="fas fa-brain"></i>
                <h1>Study & Wellness Toolkit</h1>
            </div>
            <nav>
                <ul>
                    <li><a href="#welcome" class="nav-link active" data-section="welcome">Home</a></li>
                    <li><a href="#notes" class="nav-link" data-section="notes">Smart Notes</a></li>
                    <li><a href="#ocr" class="nav-link" data-section="ocr">OCR Tool</a></li>
                    <li><a href="#focus" class="nav-link" data-section="focus">Focus Helper</a></li>
                    <li><a href="#disability" class="nav-link" data-section="disability">Self-Check</a></li>
                    <li><a href="#breathing" class="nav-link" data-section="breathing">Breathing</a></li>
                    <li><a href="#info" class="nav-link" data-section="info">Info</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <!-- Main Content -->
    <div class="container">
        <!-- Welcome Section -->
        <section id="welcome" class="section active">
            <div class="welcome-section">
                <h2>Welcome to Your All-in-One Study & Wellness Toolkit</h2>
                <p>Access a suite of tools designed to enhance your studying, improve focus, and support your mental wellness.</p>
                
                <div class="tool-cards">
                    <div class="tool-card" data-section="notes">
                        <i class="fas fa-sticky-note"></i>
                        <h3>AI Smart Notes</h3>
                        <p>Generate smart notes from your content using AI</p>
                        <small>Click to open</small>
                    </div>
                    
                    <div class="tool-card" data-section="ocr">
                        <i class="fas fa-camera"></i>
                        <h3>OCR + Text-to-Speech</h3>
                        <p>Extract text from images and convert to speech</p>
                        <small>Click to open</small>
                    </div>
                    
                    <div class="tool-card" data-section="focus">
                        <i class="fas fa-bullseye"></i>
                        <h3>Focus Friend</h3>
                        <p>Interactive attention catcher for better focus</p>
                        <small>Click to open</small>
                    </div>
                    
                    <div class="tool-card" data-section="disability">
                        <i class="fas fa-heartbeat"></i>
                        <h3>Self-Check Tool</h3>
                        <p>Screen for neurodevelopmental traits</p>
                        <small>Click to open</small>
                    </div>
                    
                    <div class="tool-card" data-section="breathing">
                        <i class="fas fa-wind"></i>
                        <h3>Breathing Exercise</h3>
                        <p>Guided breathing for relaxation and focus</p>
                        <small>Click to open</small>
                    </div>
                    
                    <div class="tool-card" data-section="info">
                        <i class="fas fa-info-circle"></i>
                        <h3>Information</h3>
                        <p>Learn about these tools and how to use them</p>
                        <small>Click to open</small>
                    </div>
                </div>
            </div>
        </section>

        <!-- AI Smart Notes Section -->
        <section id="notes" class="section">
            <h2 class="section-title"><i class="fas fa-sticky-note"></i> AI Smart Notes Generator</h2>
            
            <div class="main-content">
                <div class="input-section">
                    <div class="input-methods">
                        <div class="input-tab active" id="textTab">Text Input</div>
                        <div class="input-tab" id="fileTab">Upload File</div>
                    </div>
                    
                    <div id="textInputArea">
                        <textarea id="contentInput" placeholder="Enter your content or topic here..."></textarea>
                        <div class="action-buttons">
                            <button class="action-btn download-btn" onclick="pasteContent()">
                                <i class="fas fa-paste"></i> Paste Text
                            </button>
                            <button class="action-btn download-btn" onclick="clearContent()">
                                <i class="fas fa-trash"></i> Clear
                            </button>
                        </div>
                    </div>
                    
                    <div id="fileInputArea" style="display: none;">
                        <div class="upload-area" id="dropZone">
                            <i class="fas fa-file-upload"></i>
                            <p>Drag & drop your file here or click to browse</p>
                            <input type="file" id="fileUpload" accept=".pdf,.docx,.txt" style="display: none;">
                            <button class="upload-btn" onclick="document.getElementById('fileUpload').click()">Browse Files</button>
                        </div>
                        
                        <div id="fileInfo" style="display: none;">
                            <div class="file-info">
                                <i class="fas fa-file-pdf" id="fileIcon"></i>
                                <div class="file-details">
                                    <div class="file-name" id="fileName">document.pdf</div>
                                    <div class="file-size" id="fileSize">2.4 MB</div>
                                </div>
                                <div class="remove-btn" onclick="removeFile()">
                                    <i class="fas fa-times"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <button class="notes-generate-btn" id="generateBtn" onclick="generateNotes()">
                        <i class="fas fa-magic"></i> Generate Smart Notes
                    </button>
                </div>
                
                <div class="output-section">
                    <h2 class="section-title">Generated Notes</h2>
                    
                    <div class="notes-list" id="notesOutput">
                        <div class="empty-state">
                            <i class="fas fa-lightbulb"></i>
                            <p>Your AI-generated notes will appear here</p>
                        </div>
                    </div>
                    
                    <div class="action-buttons">
                        <button class="action-btn copy-btn" onclick="copyNotes()">
                            <i class="fas fa-copy"></i> Copy All Notes
                        </button>
                        <button class="action-btn download-btn" onclick="saveNotes()">
                            <i class="fas fa-download"></i> Download Notes
                        </button>
                    </div>
                </div>
            </div>
        </section>

        <!-- OCR Tool Section -->
        <section id="ocr" class="section">
            <h2 class="section-title"><i class="fas fa-camera"></i> Advanced OCR + Text-to-Speech Tool</h2>
            <p>This tool will be implemented in a future update.</p>
        </section>

        <!-- Focus Helper Section -->
        <section id="focus" class="section">
            <h2 class="section-title"><i class="fas fa-bullseye"></i> Focus Friend - Interactive Attention Catcher</h2>
            <p>This tool will be implemented in a future update.</p>
        </section>

        <!-- Disability Self-Check Section -->
        <section id="disability" class="section">
            <h2 class="section-title"><i class="fas fa-heartbeat"></i> Neurodevelopmental Self-Check</h2>
            <p class="subtitle">This screening tool helps identify possible traits associated with neurodevelopmental conditions. It is not a diagnostic tool but can help you understand areas where you might want to seek professional guidance.</p>

            <div class="selection-panel">
                <h2><i class="fas fa-check-square"></i> Select Disabilities to Include:</h2>
                <p class="info-text">Please select one or more categories to begin your screening. You can select multiple categories by clicking on them.</p>
                
                <div class="category-grid">
                    <div class="category-item" data-value="ID">
                        <i class="fas fa-lightbulb"></i> Intellectual Disability
                    </div>
                    <div class="category-item" data-value="ASD">
                        <i class="fas fa-puzzle-piece"></i> Autism Spectrum
                    </div>
                    <div class="category-item" data-value="ADHD">
                        <i class="fas fa-bolt"></i> ADHD
                    </div>
                    <div class="category-item" data-value="SLD">
                        <i class="fas fa-book"></i> Learning Disorder
                    </div>
                    <div class="category-item" data-value="COMM">
                        <i class="fas fa-comments"></i> Communication
                    </div>
                    <div class="category-item" data-value="DCD">
                        <i class="fas fa-hands"></i> Coordination Disorder
                    </div>
                </div>
                
                <button class="generate-btn" id="generateBtn">
                    <i class="fas fa-play-circle"></i> Start Screening
                </button>
            </div>

            <div class="quiz-container" id="quizContainer">
                <div class="quiz-header">
                    <h2><i class="fas fa-question-circle"></i> Screening Questions</h2>
                    <div class="question-count" id="questionCount">Question 1 of 10</div>
                </div>
                
                <div class="progress-container">
                    <div class="progress-text">
                        <span>Progress</span>
                        <span id="progressPercentage">0%</span>
                    </div>
                    <div class="progress">
                        <div class="progress-bar" id="progressBar"></div>
                    </div>
                </div>

                <div id="questionContainer"></div>

                <div class="navigation-buttons">
                    <button class="nav-btn prev-btn" id="prevBtn">
                        <i class="fas fa-arrow-left"></i> Previous
                    </button>
                    <button class="nav-btn next-btn" id="nextBtn">
                        Next <i class="fas fa-arrow-right"></i>
                    </button>
                </div>

                <button class="submit-btn" type="button" id="submitBtn">
                    <i class="fas fa-chart-bar"></i> See My Results
                </button>
            </div>
        </section>

        <!-- Breathing Exercise Section -->
        <section id="breathing" class="section">
            <h2 class="section-title"><i class="fas fa-wind"></i> Smooth Breathing Exercise</h2>
            <p>This tool will be implemented in a future update.</p>
        </section>

        <!-- Information Section -->
        <section id="info" class="section">
            <h2 class="section-title"><i class="fas fa-info-circle"></i> About These Tools</h2>
            <div class="tabs">
                <div class="tab active" data-tab="overview">Overview</div>
                <div class="tab" data-tab="usage">How to Use</div>
                <div class="tab" data-tab="benefits">Benefits</div>
            </div>
            
            <div class="tab-content active" id="overview">
                <h3>About This Toolkit</h3>
                <p>This comprehensive toolkit brings together several powerful tools designed to support your studying and mental wellness:</p>
                <ul>
                    <li><strong>AI Smart Notes:</strong> Transform your content into organized, meaningful notes using AI</li>
                    <li><strong>OCR + Text-to-Speech:</strong> Extract text from images and convert it to speech</li>
                    <li><strong>Focus Friend:</strong> Improve your attention and concentration with interactive exercises</li>
                    <li><strong>Self-Check Tool:</strong> Screen for potential neurodevelopmental traits</li>
                    <li><strong>Breathing Exercise:</strong> Practice guided breathing for relaxation and mental clarity</li>
                </ul>
            </div>
            
            <div class="tab-content" id="usage">
                <h3>How to Use These Tools</h3>
                <div class="usage-guide">
                    <h4>AI Smart Notes</h4>
                    <p>1. Paste your text or upload a file<br>2. Click "Generate Smart Notes"<br>3. Review, copy, or download your notes</p>
                    
                    <h4>OCR Tool</h4>
                    <p>1. Upload an image containing text<br>2. Select language and processing options<br>3. Extract text and use editing tools<br>4. Convert to speech if desired</p>
                    
                    <h4>Focus Friend</h4>
                    <p>1. Use the attention-getting animations when you need to focus<br>2. Try the quiz to engage your brain<br>3. Follow the instructions for best results</p>
                    
                    <h4>Self-Check Tool</h4>
                    <p>1. Select the categories you want to assess<br>2. Answer the questions honestly<br>3. Review your results and recommendations</p>
                    
                    <h4>Breathing Exercise</h4>
                    <p>1. Set your preferred breathing rhythm<br>2. Follow the visual guidance<br>3. Relax and focus on your breathing</p>
                </div>
            </div>
            
            <div class="tab-content" id="benefits">
                <h3>Benefits of These Tools</h3>
                <div class="benefits-list">
                    <div class="benefit-item">
                        <h4><i class="fas fa-graduation-cap"></i> Enhanced Learning</h4>
                        <p>AI-powered note generation helps you process and retain information more effectively.</p>
                    </div>
                    <div class="benefit-item">
                        <h4><i class="fas fa-accessibility"></i> Accessibility</h4>
                        <p>OCR and text-to-speech tools make content accessible in various formats.</p>
                    </div>
                    <div class="benefit-item">
                        <h4><i class="fas fa-brain"></i> Improved Focus</h4>
                        <p>Attention-training exercises help strengthen your concentration abilities.</p>
                    </div>
                    <div class="benefit-item">
                        <h4><i class="fas fa-heart"></i> Stress Reduction</h4>
                        <p>Breathing exercises promote relaxation and mental clarity.</p>
                    </div>
                    <div class="benefit-item">
                        <h4><i class="fas fa-clipboard-check"></i> Self-Awareness</h4>
                        <p>Screening tools provide insights into your cognitive patterns and needs.</p>
                    </div>
                </div>
            </div>
        </section>
    </div>

    <footer>
        <p>Made with ❤️ for students and wellness | © 2023 Study & Wellness Toolkit</p>
        <p>Disclaimer: These tools are for informational purposes only and not a substitute for professional advice.</p>
    </footer>

    <!-- Results Modal -->
    <div class="modal" id="resultModal">
        <div class="modal-content">
            <button class="close-btn" id="closeModal">&times;</button>
            
            <div class="result-header">
                <h2><i class="fas fa-chart-pie"></i> Your Screening Summary</h2>
                <p>Based on your responses, here's an overview of potential traits</p>
            </div>
            
            <div class="result-summary" id="resultSummary"></div>
            
            <hr/>
            
            <h3><i class="fas fa-clipboard-list"></i> Detailed Report</h3>
            <div id="finalReport"></div>
            
            <div class="resources-section">
                <h3><i class="fas fa-life-ring"></i> Resources & Next Steps</h3>
                <p>If you have concerns based on these results, consider these resources:</p>
                <ul class="resource-list">
                    <li><i class="fas fa-globe"></i> <a href="#" target="_blank">National Institute of Mental Health</a></li>
                    <li><i class="fas fa-globe"></i> <a href="#" target="_blank">CHADD - ADHD Resources</a></li>
                    <li><i class="fas fa-globe"></i> <a href="#" target="_blank">Autism Speaks Resource Guide</a></li>
                    <li><i class="fas fa-globe"></i> <a href="#" target="_blank">Learning Disabilities Association</a></li>
                </ul>
            </div>
            
            <button class="print-btn" id="printBtn">
                <i class="fas fa-print"></i> Print Results
            </button>
        </div>
    </div>

    <div class="notification" id="notification">
        <i class="fas fa-check-circle" id="notificationIcon"></i>
        <span id="notificationText"></span>
    </div>

    <script>
        // Navigation functionality
        document.addEventListener('DOMContentLoaded', function() {
            // Section navigation
            const navLinks = document.querySelectorAll('.nav-link');
            const sections = document.querySelectorAll('.section');
            const toolCards = document.querySelectorAll('.tool-card');
            
            // Function to show a specific section
            function showSection(sectionId) {
                // Hide all sections
                sections.forEach(section => {
                    section.classList.remove('active');
                });
                
                // Show the selected section
                document.getElementById(sectionId).classList.add('active');
                
                // Update active nav link
                navLinks.forEach(link => {
                    link.classList.remove('active');
                    if (link.getAttribute('data-section') === sectionId) {
                        link.classList.add('active');
                    }
                });
                
                // Scroll to top
                window.scrollTo(0, 0);
            }
            
            // Add click event to nav links
            navLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const sectionId = this.getAttribute('data-section');
                    showSection(sectionId);
                });
            });
            
            // Add click event to tool cards
            toolCards.forEach(card => {
                card.addEventListener('click', function() {
                    const sectionId = this.getAttribute('data-section');
                    showSection(sectionId);
                });
            });
            
            // Tab functionality for info section
            const infoTabs = document.querySelectorAll('.tab');
            const tabContents = document.querySelectorAll('.tab-content');
            
            infoTabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    const tabId = this.getAttribute('data-tab');
                    
                    // Remove active class from all tabs and contents
                    infoTabs.forEach(t => t.classList.remove('active'));
                    tabContents.forEach(c => c.classList.remove('active'));
                    
                    // Add active class to current tab and content
                    this.classList.add('active');
                    document.getElementById(tabId).classList.add('active');
                });
            });
            
            // Notification function
            window.showNotification = function(message, isError = false) {
                const notification = document.getElementById('notification');
                const notificationIcon = document.getElementById('notificationIcon');
                const notificationText = document.getElementById('notificationText');
                
                notification.className = isError ? 'notification error' : 'notification';
                notificationIcon.className = isError ? 'fas fa-exclamation-circle' : 'fas fa-check-circle';
                notificationText.textContent = message;
                notification.classList.add('show');
                
                setTimeout(() => {
                    notification.classList.remove('show');
                }, 3000);
            };
            
            // Neurodevelopmental Self-Check functionality
            const questionBank = {
                ID: [
                    "I often need extra help to understand or manage tasks.",
                    "I find it difficult to solve problems without guidance.",
                    "I need more time than others to learn new skills.",
                    "I struggle with remembering instructions.",
                    "I often rely on others for daily decision making.",
                    "I find abstract concepts very confusing.",
                    "I get overwhelmed with multi-step tasks.",
                    "I need constant reminders for routines.",
                    "I find it challenging to manage money or time.",
                    "I require repeated practice to master simple tasks."
                ],
                ASD: [
                    "I prefer routines and get uncomfortable with sudden changes.",
                    "I struggle with understanding social cues.",
                    "I find it easier to talk about my interests than other topics.",
                    "I dislike loud noises or bright lights.",
                    "I often repeat actions or phrases.",
                    "I prefer being alone over group activities.",
                    "I focus intensely on specific interests.",
                    "I struggle to make eye contact.",
                    "I find sarcasm or jokes confusing.",
                    "I like things to be arranged in a particular order."
                ],
                ADHD: [
                    "I find it hard to stay focused for long.",
                    "I often feel restless or fidgety.",
                    "I get distracted easily.",
                    "I struggle to finish tasks I start.",
                    "I talk excessively or interrupt others.",
                    "I lose things I need often.",
                    "I forget appointments or deadlines.",
                    "I act impulsively without thinking.",
                    "I procrastinate on important work.",
                    "I need external pressure to complete tasks."
                ],
                SLD: [
                    "I struggle with reading compared to peers.",
                    "I find spelling difficult even for simple words.",
                    "I have trouble understanding written material.",
                    "I find writing tasks very challenging.",
                    "I mix up letters or numbers.",
                    "I struggle to learn basic math facts.",
                    "I avoid tasks that involve reading or writing.",
                    "I read slowly and with great effort.",
                    "I struggle with word problems in math.",
                    "I often mispronounce or confuse similar words."
                ],
                COMM: [
                    "I have trouble expressing myself clearly.",
                    "I find it hard to understand spoken instructions.",
                    "I get anxious in conversations.",
                    "I avoid talking in groups.",
                    "I use fewer words than others my age.",
                    "I struggle to find the right words.",
                    "I misunderstand meanings of some words.",
                    "I pause a lot while speaking.",
                    "I have difficulty following fast conversations.",
                    "I often ask people to repeat what they said."
                ],
                DCD: [
                    "I seem clumsy compared to peers.",
                    "I struggle with sports or games requiring coordination.",
                    "I find handwriting messy or tiring.",
                    "I have trouble tying shoelaces or buttons.",
                    "I bump into things often.",
                    "I find it hard to learn dance or movement sequences.",
                    "I struggle with using tools like scissors.",
                    "I avoid physical activities.",
                    "I drop things frequently.",
                    "I find new motor tasks very hard to learn."
                ]
            };

            const categoryLabels = {
                ID: "Intellectual Disability",
                ASD: "Autism Spectrum",
                ADHD: "ADHD",
                SLD: "Specific Learning Disorder",
                COMM: "Communication",
                DCD: "Coordination Disorder"
            };

            const categoryIcons = {
                ID: "fa-lightbulb",
                ASD: "fa-puzzle-piece",
                ADHD: "fa-bolt",
                SLD: "fa-book",
                COMM: "fa-comments",
                DCD: "fa-hands"
            };

            let currentQuestions = [];
            let currentQuestionIndex = 0;
            let userResponses = {};

            // Set up category selection
            document.querySelectorAll('.category-item').forEach(item => {
                item.addEventListener('click', function() {
                    this.classList.toggle('selected');
                });
            });

            // Generate questions when button is clicked
            document.getElementById('generateBtn').addEventListener('click', generateQuestions);

            // Set up navigation buttons
            document.getElementById('prevBtn').addEventListener('click', showPreviousQuestion);
            document.getElementById('nextBtn').addEventListener('click', showNextQuestion);

            // Set up submit button
            document.getElementById('submitBtn').addEventListener('click', showResults);

            // Close modal
            document.getElementById('closeModal').addEventListener('click', function() {
                document.getElementById('resultModal').style.display = 'none';
            });

            // Print results
            document.getElementById('printBtn').addEventListener('click', function() {
                window.print();
            });

            function generateQuestions() {
                const selectedCategories = Array.from(document.querySelectorAll('.category-item.selected'))
                    .map(item => item.dataset.value);
                
                if (selectedCategories.length === 0) {
                    showNotification('Please select at least one category to continue.', true);
                    return;
                }

                // Reset state
                currentQuestions = [];
                currentQuestionIndex = 0;
                userResponses = {};

                // Generate questions from selected categories
                selectedCategories.forEach(category => {
                    questionBank[category].forEach(question => {
                        currentQuestions.push({
                            category,
                            text: question
                        });
                    });
                });

                // Shuffle questions for better user experience
                shuffleArray(currentQuestions);

                // Show quiz container
                document.getElementById('quizContainer').style.display = 'block';

                // Scroll to top
                window.scrollTo(0, 0);

                // Show first question
                showQuestion(0);
            }

            function showQuestion(index) {
                if (index < 0 || index >= currentQuestions.length) return;
                
                currentQuestionIndex = index;
                const question = currentQuestions[index];
                
                // Update question count
                document.getElementById('questionCount').textContent = `Question ${index + 1} of ${currentQuestions.length}`;
                
                // Create question card
                const questionContainer = document.getElementById('questionContainer');
                questionContainer.innerHTML = `
                    <div class="question-card">
                        <h3>
                            <i class="fas ${categoryIcons[question.category]}"></i>
                            ${categoryLabels[question.category]}
                            <span class="category-tag">${question.category}</span>
                        </h3>
                        <p>${question.text}</p>
                        <div class="options">
                            <button type="button" data-value="0" class="never">Never</button>
                            <button type="button" data-value="1" class="sometimes">Sometimes</button>
                            <button type="button" data-value="2" class="often">Often</button>
                            <button type="button" data-value="3" class="always">Always</button>
                        </div>
                    </div>
                `;
                
                // Set active class if user has already answered this question
                const questionId = `${question.category}-${index}`;
                if (userResponses[questionId]) {
                    const buttons = questionContainer.querySelectorAll('.options button');
                    buttons.forEach(button => {
                        if (parseInt(button.dataset.value) === userResponses[questionId]) {
                            button.classList.add('active');
                        }
                    });
                }
                
                // Add event listeners to options
                questionContainer.querySelectorAll('.options button').forEach(button => {
                    button.addEventListener('click', function() {
                        // Remove active class from all buttons in this question
                        this.parentElement.querySelectorAll('button').forEach(btn => {
                            btn.classList.remove('active');
                        });
                        
                        // Add active class to clicked button
                        this.classList.add('active');
                        
                        // Store response
                        const questionId = `${question.category}-${index}`;
                        userResponses[questionId] = parseInt(this.dataset.value);
                        
                        // Update progress
                        updateProgress();
                    });
                });
                
                // Update navigation buttons
                document.getElementById('prevBtn').style.display = index === 0 ? 'none' : 'flex';
                document.getElementById('nextBtn').style.display = index === currentQuestions.length - 1 ? 'none' : 'flex';
                document.getElementById('submitBtn').style.display = index === currentQuestions.length - 1 ? 'block' : 'none';
                
                // Update progress
                updateProgress();
            }

            function showNextQuestion() {
                if (currentQuestionIndex < currentQuestions.length - 1) {
                    showQuestion(currentQuestionIndex + 1);
                }
            }

            function showPreviousQuestion() {
                if (currentQuestionIndex > 0) {
                    showQuestion(currentQuestionIndex - 1);
                }
            }

            function updateProgress() {
                const answeredCount = Object.keys(userResponses).length;
                const progressPercentage = (answeredCount / currentQuestions.length) * 100;
                
                document.getElementById('progressBar').style.width = `${progressPercentage}%`;
                document.getElementById('progressPercentage').textContent = `${Math.round(progressPercentage)}%`;
            }

            function showResults() {
                const results = {};
                let totalScore = 0;
                let maxPossibleScore = 0;
                
                // Initialize results object
                Object.keys(categoryLabels).forEach(category => {
                    results[category] = {
                        score: 0,
                        count: 0,
                        questions: []
                    };
                });
                
                // Calculate scores
                currentQuestions.forEach((question, index) => {
                    const questionId = `${question.category}-${index}`;
                    const response = userResponses[questionId] || 0;
                    
                    results[question.category].score += response;
                    results[question.category].count += 1;
                    results[question.category].questions.push({
                        text: question.text,
                        response: response
                    });
                    
                    totalScore += response;
                    maxPossibleScore += 3; // Maximum value for any question is 3
                });
                
                // Calculate percentages and prepare for display
                const resultSummary = document.getElementById('resultSummary');
                const finalReport = document.getElementById('finalReport');
                
                resultSummary.innerHTML = '';
                finalReport.innerHTML = '';
                
                // Create result cards for each category
                Object.keys(results).forEach(category => {
                    if (results[category].count > 0) {
                        const categoryScore = results[category].score;
                        const maxCategoryScore = results[category].count * 3;
                        const percentage = Math.round((categoryScore / maxCategoryScore) * 100);
                        
                        let scoreClass = 'score-low';
                        if (percentage > 40) scoreClass = 'score-medium';
                        if (percentage > 70) scoreClass = 'score-high';
                        
                        const card = document.createElement('div');
                        card.className = 'result-card';
                        card.innerHTML = `
                            <h3><i class="fas ${categoryIcons[category]}"></i> ${categoryLabels[category]}</h3>
                            <div class="score-circle ${scoreClass}">${percentage}%</div>
                            <p>Score: ${categoryScore}/${maxCategoryScore}</p>
                        `;
                        
                        resultSummary.appendChild(card);
                        
                        // Add to detailed report
                        let consultingNote = "";
                        if (percentage <= 30) {
                            consultingNote = "Low traits observed. No major concerns identified in this area.";
                        } else if (percentage <= 60) {
                            consultingNote = "Moderate traits observed. Consider monitoring or implementing self-help strategies.";
                        } else {
                            consultingNote = "High traits observed. It may be helpful to consult a professional for further evaluation.";
                        }
                        
                        finalReport.innerHTML += `
                            <div class="recommendation-card">
                                <h4>${categoryLabels[category]} (${percentage}%)</h4>
                                <p>${consultingNote}</p>
                            </div>
                        `;
                    }
                });
                
                // Show overall score if multiple categories
                if (Object.keys(results).length > 1) {
                    const overallPercentage = Math.round((totalScore / maxPossibleScore) * 100);
                    let overallScoreClass = 'score-low';
                    if (overallPercentage > 40) overallScoreClass = 'score-medium';
                    if (overallPercentage > 70) overallScoreClass = 'score-high';
                    
                    const overallCard = document.createElement('div');
                    overallCard.className = 'result-card';
                    overallCard.innerHTML = `
                        <h3><i class="fas fa-star"></i> Overall Score</h3>
                        <div class="score-circle ${overallScoreClass}">${overallPercentage}%</div>
                        <p>Total: ${totalScore}/${maxPossibleScore}</p>
                    `;
                    
                    resultSummary.prepend(overallCard);
                }
                
                // Show modal
                document.getElementById('resultModal').style.display = 'flex';
            }

            // Utility function to shuffle array
            function shuffleArray(array) {
                for (let i = array.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() (i + 1));
                    [array[i], array[j]] = [array[j], array[i]];
                }
                return array;
            }
            
            // AI Smart Notes functionality
            const textTab = document.getElementById('textTab');
            const fileTab = document.getElementById('fileTab');
            const textInputArea = document.getElementById('textInputArea');
            const fileInputArea = document.getElementById('fileInputArea');
            const dropZone = document.getElementById('dropZone');
            const fileUpload = document.getElementById('fileUpload');
            const fileInfo = document.getElementById('fileInfo');
            const notesOutput = document.getElementById('notesOutput');
            const notesGenerateBtn = document.getElementById('generateBtn');
            
            // Current state
            let currentFile = null;
            let generatedNotes = [];
            
            // Set up tab switching
            textTab.addEventListener('click', () => {
                textTab.classList.add('active');
                fileTab.classList.remove('active');
                textInputArea.style.display = 'block';
                fileInputArea.style.display = 'none';
            });
            
            fileTab.addEventListener('click', () => {
                fileTab.classList.add('active');
                textTab.classList.remove('active');
                fileInputArea.style.display = 'block';
                textInputArea.style.display = 'none';
            });
            
            // Set up file upload
            fileUpload.addEventListener('change', handleFileUpload);
            
            // Set up drag and drop
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropZone.addEventListener(eventName, preventDefaults, false);
            });
            
            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }
            
            ['dragenter', 'dragover'].forEach(eventName => {
                dropZone.addEventListener(eventName, highlight, false);
            });
            
            ['dragleave', 'drop'].forEach(eventName => {
                dropZone.addEventListener(eventName, unhighlight, false);
            });
            
            function highlight() {
                dropZone.classList.add('highlight');
            }
            
            function unhighlight() {
                dropZone.classList.remove('highlight');
            }
            
            dropZone.addEventListener('drop', handleDrop, false);
            
            function handleDrop(e) {
                const dt = e.dataTransfer;
                const files = dt.files;
                if (files.length) {
                    handleFile(files[0]);
                }
            }
            
            // Handle file selection
            function handleFileUpload(e) {
                if (e.target.files.length) {
                    handleFile(e.target.files[0]);
                }
            }
            
            function handleFile(file) {
                const validTypes = ['application/pdf', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'text/plain'];
                
                if (!validTypes.includes(file.type)) {
                    showNotification('Please upload a PDF, DOCX, or TXT file', true);
                    return;
                }
                
                if (file.size > 10 * 1024 * 1024) {
                    showNotification('File size must be less than 10MB', true);
                    return;
                }
                
                // Store the file
                currentFile = file;
                
                // Display file info
                document.getElementById('fileName').textContent = file.name;
                document.getElementById('fileSize').textContent = formatFileSize(file.size);
                
                // Set appropriate icon
                const fileIcon = document.getElementById('fileIcon');
                if (file.type === 'application/pdf') {
                    fileIcon.className = 'fas fa-file-pdf';
                } else if (file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
                    fileIcon.className = 'fas fa-file-word';
                } else {
                    fileIcon.className = 'fas fa-file-alt';
                }
                
                fileInfo.style.display = 'block';
                
                showNotification('File uploaded successfully');
            }
            
            function removeFile() {
                fileUpload.value = '';
                fileInfo.style.display = 'none';
                currentFile = null;
            }
            
            function formatFileSize(bytes) {
                if (bytes < 1024) return bytes + ' bytes';
                else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';
                else return (bytes / 1048576).toFixed(1) + ' MB';
            }
            
            // Function to generate notes (simulates AI processing)
            function generateNotes() {
                const content = document.getElementById('contentInput').value;
                
                if (!content.trim() && !currentFile) {
                    showNotification('Please enter some content or upload a file first', true);
                    return;
                }
                
                // Show loading state
                notesGenerateBtn.innerHTML = '<div class="loading"></div> Generating Notes...';
                notesGenerateBtn.disabled = true;
                
                // Clear previous output
                notesOutput.innerHTML = '<div class="empty-state"><i class="fas fa-spinner fa-spin"></i><p>Generating notes with AI...</p></div>';
                
                // Simulate processing time
                setTimeout(() => {
                    try {
                        let processedContent = content;
                        
                        // If a file was uploaded, simulate processing it
                        if (currentFile) {
                            processedContent = simulateFileProcessing(currentFile, content);
                        }
                        
                        // Generate notes using our Python-like algorithm
                        generatedNotes = generateNotesAI(processedContent);
                        
                        // Display the notes
                        displayNotes(generatedNotes);
                        
                        showNotification('Notes generated successfully!');
                    } catch (error) {
                        console.error('Error generating notes:', error);
                        notesOutput.innerHTML = '<div class="empty-state"><i class="fas fa-exclamation-triangle"></i><p>Error generating notes. Please try again.</p></div>';
                        showNotification('Error generating notes', true);
                    } finally {
                        // Reset button state
                        notesGenerateBtn.innerHTML = '<i class="fas fa-magic"></i> Generate Smart Notes';
                        notesGenerateBtn.disabled = false;
                    }
                }, 2000);
            }
            
            // Simulate file processing (in a real app, this would extract text from the file)
            function simulateFileProcessing(file, fallbackContent) {
                // This is a simulation - in a real app, you would extract text from the file
                const fileType = file.type;
                let content = fallbackContent;
                
                if (fileType === 'application/pdf') {
                    content = "PDF content simulation: Important concepts from document. " +
                             "First main idea with supporting details. Second key concept explained. " +
                             "Summary of the main points from the uploaded PDF file.";
                } else if (fileType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
                    content = "DOCX content simulation: Key takeaways from document. " +
                             "Primary themes and ideas. Supporting evidence and examples. " +
                             "Conclusions and recommendations from the Word document.";
                } else if (fileType === 'text/plain') {
                    content = "Text file content simulation: Main ideas extracted from text. " +
                             "Important points highlighted. Key concepts summarized. " +
                             "Essential information from the uploaded text file.";
                }
                
                return content + " " + fallbackContent;
            }
            
            // Python-like algorithm for generating notes
            function generateNotesAI(text, num_notes = 7) {
                if (!text.trim()) {
                    return ["No content provided to generate notes."];
                }
                
                // Simple sentence tokenization
                const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);
                
                if (sentences.length < 3) {
                    return [text] || ["No meaningful content found."];
                }
                
                // Simple "important" word detection
                const importantWords = ['important', 'key', 'essential', 'critical', 'significant', 
                                      'major', 'primary', 'principal', 'core', 'fundamental', 
                                      'vital', 'crucial', 'necessary', 'value', 'benefit', 
                                      'advantage', 'concept', 'theory', 'definition', 'example'];
                
                // Score sentences based on important words and length
                const sentenceScores = {};
                sentences.forEach(sentence => {
                    let score = 0;
                    const words = sentence.toLowerCase().split(/\s+/);
                    
                    // Score based on important words
                    words.forEach(word => {
                        if (importantWords.includes(word)) {
                            score += 3;
                        }
                    });
                    
                    // Score based on length (medium-length sentences are often more substantive)
                    const wordCount = words.length;
                    if (wordCount > 5 && wordCount < 20) {
                        score += 2;
                    }
                    
                    sentenceScores[sentence] = score;
                });
                
                // Sort sentences by score and get top ones
                const sortedSentences = Object.entries(sentenceScores)
                    .sort((a, b) => b[1] - a[1])
                    .map(entry => entry[0]);
                
                // Get top sentences as notes
                const keySentences = sortedSentences.slice(0, Math.min(num_notes, sortedSentences.length));
                
                // Clean up the notes
                const notes = [];
                keySentences.forEach(sentence => {
                    // Remove extra whitespace
                    let cleanNote = sentence.replace(/\s+/g, ' ').trim();
                    // Ensure it ends with proper punctuation
                    if (cleanNote && !/[.!?]$/.test(cleanNote)) {
                        cleanNote += '.';
                    }
                    // Capitalize first letter
                    cleanNote = cleanNote.charAt(0).toUpperCase() + cleanNote.slice(1);
                    notes.push(cleanNote);
                });
                
                return notes.length > 0 ? notes : ["No meaningful notes could be generated."];
            }
            
            // Display generated notes
            function displayNotes(notes) {
                notesOutput.innerHTML = '';
                
                if (notes.length === 0) {
                    notesOutput.innerHTML = '<div class="empty-state"><i class="fas fa-exclamation-circle"></i><p>No notes could be generated from the content.</p></div>';
                    return;
                }
                
                notes.forEach(note => {
                    const noteElement = document.createElement('div');
                    noteElement.className = 'note-item';
                    noteElement.innerHTML = `
                        <i class="fas fa-check-circle"></i>
                        <div class="note-text">${note}</div>
                    `;
                    notesOutput.appendChild(noteElement);
                });
            }
            
            // Function to clear the content input
            function clearContent() {
                document.getElementById('contentInput').value = '';
                document.getElementById('contentInput').focus();
            }
            
            // Function to paste content from clipboard
            async function pasteContent() {
                try {
                    const text = await navigator.clipboard.readText();
                    document.getElementById('contentInput').value = text;
                    showNotification('Content pasted from clipboard');
                } catch (err) {
                    showNotification('Failed to paste from clipboard', true);
                    console.error('Failed to read clipboard contents: ', err);
                }
            }
            
            // Function to copy all generated notes
            function copyNotes() {
                if (generatedNotes.length === 0) {
                    showNotification('No notes to copy', true);
                    return;
                }
                
                let notesText = '';
                generatedNotes.forEach((note, index) => {
                    notesText += `${index + 1}. ${note}\n`;
                });
                
                navigator.clipboard.writeText(notesText).then(() => {
                    showNotification('Notes copied to clipboard!');
                }).catch(err => {
                    showNotification('Failed to copy notes', true);
                    console.error('Could not copy text: ', err);
                });
            }
            
            // Function to save notes as a text file
            function saveNotes() {
                if (generatedNotes.length === 0) {
                    showNotification('No notes to save', true);
                    return;
                }
                
                let notesText = 'Smart Notes - Generated Notes\n\n';
                generatedNotes.forEach((note, index) => {
                    notesText += `${index + 1}. ${note}\n\n`;
                });
                
                const blob = new Blob([notesText], { type: 'text/plain' });
                const url = URL.createObjectURL(blob);
                
                const a = document.createElement('a');
                a.href = url;
                a.download = 'smart-notes.txt';
                document.body.appendChild(a);
                a.click();
                
                setTimeout(() => {
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                    showNotification('Notes saved successfully!');
                }, 100);
            }
            
            // Add event listener for Enter key in textarea
            document.getElementById('contentInput').addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && e.ctrlKey) {
                    generateNotes();
                }
            });
        });
    </script>
</body>
</html>





























Image : 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced OCR + Text-to-Speech Tool</title>
    <script src="https://cdn.jsdelivr.net/npm/tesseract.js@4.0.3/dist/tesseract.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #4361ee;
            --primary-dark: #3a56d4;
            --secondary: #7209b7;
            --accent: #f72585;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --success: #4cc9f0;
            --warning: #f9c74f;
            --error: #f94144;
            --radius: 12px;
            --shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
            --bg: #f5f7fa;
            --text: #212529;
            --card-bg: #ffffff;
            --border: #e5e7eb;
        }

        .dark-mode {
            --bg: #121212;
            --text: #e5e7eb;
            --card-bg: #1e1e1e;
            --border: #2d2d2d;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: var(--bg);
            color: var(--text);
            line-height: 1.6;
            min-height: 100vh;
            padding: 20px;
            transition: var(--transition);
        }

        .container {
            max-width: 1200px;
            margin: 40px auto;
            background: var(--card-bg);
            padding: 30px;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            transition: var(--transition);
        }

        header {
            text-align: center;
            margin-bottom: 30px;
            position: relative;
        }

        h1 {
            font-size: 32px;
            color: var(--primary);
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 12px;
        }

        .theme-toggle {
            position: absolute;
            right: 0;
            top: 0;
            background: var(--card-bg);
            border: 1px solid var(--border);
            border-radius: 20px;
            padding: 8px 15px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: var(--transition);
        }

        .theme-toggle:hover {
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .upload-area {
            border: 2px dashed var(--border);
            border-radius: var(--radius);
            padding: 40px 20px;
            text-align: center;
            margin-bottom: 25px;
            transition: var(--transition);
            cursor: pointer;
            position: relative;
            background: rgba(67, 97, 238, 0.03);
        }

        .upload-area:hover {
            border-color: var(--primary);
            background: rgba(67, 97, 238, 0.05);
        }

        .upload-area i {
            font-size: 48px;
            color: var(--primary);
            margin-bottom: 15px;
        }

        .upload-text {
            font-size: 18px;
            font-weight: 500;
            margin-bottom: 10px;
        }

        .upload-subtext {
            color: var(--gray);
            font-size: 14px;
        }

        #file-input {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            opacity: 0;
            cursor: pointer;
        }

        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            padding: 14px 28px;
            background: linear-gradient(to right, var(--primary), var(--primary-dark));
            color: white;
            border: none;
            border-radius: var(--radius);
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            box-shadow: 0 4px 6px rgba(67, 97, 238, 0.25);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(67, 97, 238, 0.3);
        }

        .btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none;
        }

        .text-editor {
            width: 100%;
            min-height: 250px;
            padding: 20px;
            border: 2px solid var(--border);
            border-radius: var(--radius);
            font-size: 16px;
            line-height: 1.6;
            resize: vertical;
            transition: var(--transition);
            margin-top: 20px;
            background: var(--card-bg);
            color: var(--text);
        }

        .text-editor:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
        }

        .editor-toolbar {
            display: flex;
            gap: 8px;
            margin-top: 15px;
            flex-wrap: wrap;
            padding: 10px;
            background: var(--bg);
            border-radius: var(--radius);
        }

        .editor-toolbar button {
            padding: 8px 12px;
            background: var(--card-bg);
            border: 1px solid var(--border);
            border-radius: 6px;
            cursor: pointer;
            transition: var(--transition);
        }

        .editor-toolbar button:hover {
            background: var(--primary);
            color: white;
        }

        .image-preview-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-top: 20px;
        }

        @media (max-width: 768px) {
            .image-preview-container {
                grid-template-columns: 1fr;
            }
        }

        .image-preview {
            width: 100%;
            border-radius: var(--radius);
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .image-preview img {
            width: 100%;
            display: block;
            transition: transform 0.3s ease;
        }

        .image-controls {
            display: flex;
            gap: 10px;
            margin-top: 15px;
            flex-wrap: wrap;
        }

        .image-controls button {
            padding: 8px 15px;
            background: var(--card-bg);
            border: 1px solid var(--border);
            border-radius: 6px;
            cursor: pointer;
            transition: var(--transition);
        }

        .image-controls button:hover {
            background: var(--primary);
            color: white;
        }

        .action-buttons {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            margin-top: 20px;
        }

        .btn-secondary {
            background: transparent;
            color: var(--primary);
            border: 2px solid var(--primary);
        }

        .btn-secondary:hover {
            background: rgba(67, 97, 238, 0.05);
        }

        .btn-warning {
            background: var(--warning);
            color: var(--dark);
        }

        .btn-danger {
            background: var(--error);
        }

        .status-indicator {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 12px 20px;
            background: var(--bg);
            border-radius: 8px;
            margin-top: 20px;
            font-size: 14px;
        }

        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: var(--gray);
        }

        .status-dot.processing {
            background: var(--warning);
            animation: pulse 1.5s infinite;
        }

        .status-dot.success {
            background: var(--success);
            box-shadow: 0 0 0 3px rgba(76, 201, 240, 0.2);
        }

        .status-dot.error {
            background: var(--error);
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: var(--bg);
            border-radius: 4px;
            overflow: hidden;
            margin-top: 10px;
        }

        .progress {
            height: 100%;
            background: linear-gradient(to right, var(--primary), var(--secondary));
            width: 0%;
            transition: width 0.3s ease;
            border-radius: 4px;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .loading {
            display: none;
            text-align: center;
            padding: 30px 0;
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 5px solid var(--bg);
            border-top: 5px solid var(--primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 16px 24px;
            background: var(--card-bg);
            color: var(--text);
            border-radius: 8px;
            box-shadow: var(--shadow);
            display: flex;
            align-items: center;
            gap: 12px;
            transform: translateX(150%);
            transition: transform 0.3s ease;
            z-index: 1000;
            border-left: 4px solid var(--primary);
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification-icon {
            font-size: 20px;
        }

        .notification.success {
            border-left-color: var(--success);
        }

        .notification.error {
            border-left-color: var(--error);
        }

        .language-selector {
            margin-top: 20px;
            margin-bottom: 20px;
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

        .option-label {
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        select, input[type="range"] {
            padding: 10px;
            border: 1px solid var(--border);
            border-radius: 6px;
            background: var(--card-bg);
            color: var(--text);
        }

        .history-section {
            margin-top: 40px;
            border-top: 1px solid var(--border);
            padding-top: 20px;
        }

        .history-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .history-item {
            border: 1px solid var(--border);
            border-radius: var(--radius);
            padding: 15px;
            cursor: pointer;
            transition: var(--transition);
            background: var(--card-bg);
        }

        .history-item:hover {
            border-color: var(--primary);
            box-shadow: var(--shadow);
            transform: translateY(-5px);
        }

        .history-item img {
            width: 100%;
            height: 150px;
            object-fit: cover;
            border-radius: calc(var(--radius) - 4px);
            margin-bottom: 10px;
        }

        .history-item h4 {
            margin-bottom: 8px;
            color: var(--primary);
        }

        .history-item p {
            font-size: 14px;
            color: var(--text);
            overflow: hidden;
            text-overflow: ellipsis;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            margin-bottom: 10px;
        }

        .history-meta {
            display: flex;
            justify-content: space-between;
            font-size: 12px;
            color: var(--gray);
        }

        .tts-controls {
            display: flex;
            gap: 15px;
            align-items: center;
            margin-top: 20px;
            flex-wrap: wrap;
            padding: 15px;
            background: var(--bg);
            border-radius: var(--radius);
        }

        .tts-controls label {
            font-weight: 500;
            margin-right: 5px;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .tts-controls select, .tts-controls input {
            padding: 8px;
            border: 1px solid var(--border);
            border-radius: 4px;
            background: var(--card-bg);
            color: var(--text);
        }

        .text-stats {
            display: flex;
            gap: 15px;
            margin-top: 15px;
            font-size: 14px;
            color: var(--gray);
        }

        .stat {
            display: flex;
            align-items: center;
            gap: 5px;
            padding: 5px 10px;
            background: var(--bg);
            border-radius: 20px;
        }

        .feature-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }

        .feature-card {
            padding: 20px;
            background: var(--bg);
            border-radius: var(--radius);
            text-align: center;
            transition: var(--transition);
        }

        .feature-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow);
        }

        .feature-card i {
            font-size: 36px;
            color: var(--primary);
            margin-bottom: 15px;
        }

        .feature-card h3 {
            margin-bottom: 10px;
            color: var(--primary);
        }

        .tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            border-bottom: 1px solid var(--border);
            padding-bottom: 10px;
        }

        .tab {
            padding: 10px 20px;
            border-radius: 6px 6px 0 0;
            cursor: pointer;
            transition: var(--transition);
            border: 1px solid transparent;
        }

        .tab.active {
            border-color: var(--border);
            border-bottom-color: var(--card-bg);
            background: var(--card-bg);
            color: var(--primary);
            margin-bottom: -11px;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .floating-buttons {
            position: fixed;
            bottom: 30px;
            right: 30px;
            display: flex;
            flex-direction: column;
            gap: 10px;
            z-index: 999;
        }

        .floating-btn {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: var(--primary);
            color: white;
            box-shadow: var(--shadow);
            cursor: pointer;
            transition: var(--transition);
            font-size: 20px;
        }

        .floating-btn:hover {
            transform: scale(1.1);
        }

        /* New styles for multiple uploads and translation */
        .multi-image-container {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin-top: 15px;
        }

        .multi-image-item {
            position: relative;
            width: 100px;
            height: 100px;
            border-radius: 8px;
            overflow: hidden;
            cursor: pointer;
            border: 2px solid transparent;
            transition: var(--transition);
        }

        .multi-image-item.active {
            border-color: var(--primary);
        }

        .multi-image-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .multi-image-remove {
            position: absolute;
            top: 5px;
            right: 5px;
            background: var(--error);
            color: white;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            cursor: pointer;
        }

        .translation-container {
            margin-top: 20px;
            padding: 15px;
            background: var(--bg);
            border-radius: var(--radius);
            display: none;
        }

        .translation-result {
            margin-top: 15px;
            padding: 15px;
            background: var(--card-bg);
            border-radius: var(--radius);
            border: 1px solid var(--border);
            min-height: 100px;
            max-height: 300px;
            overflow-y: auto;
        }

        .language-detection {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 10px;
            padding: 8px 12px;
            background: var(--card-bg);
            border-radius: 20px;
            font-size: 14px;
        }

        .language-flag {
            font-size: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1><i class="fas fa-scanner"></i> Advanced OCR + Text-to-Speech Tool</h1>
            <button class="theme-toggle" id="theme-toggle">
                <i class="fas fa-moon"></i> Dark Mode
            </button>
        </header>
        
        <div class="feature-grid">
            <div class="feature-card">
                <i class="fas fa-camera"></i>
                <h3>Image Capture</h3>
                <p>Extract text from images with advanced OCR technology</p>
            </div>
            <div class="feature-card">
                <i class="fas fa-language"></i>
                <h3>Multi-language</h3>
                <p>Supports multiple languages for text extraction</p>
            </div>
            <div class="feature-card">
                <i class="fas fa-volume-up"></i>
                <h3>Text-to-Speech</h3>
                <p>Convert extracted text to natural sounding audio</p>
            </div>
            <div class="feature-card">
                <i class="fas fa-edit"></i>
                <h3>Text Editing</h3>
                <p>Edit and format your extracted text with our rich editor</p>
            </div>
        </div>

        <div class="upload-area" id="upload-area">
            <i class="fas fa-cloud-upload-alt"></i>
            <div class="upload-text">Drag & Drop your images here</div>
            <div class="upload-subtext">Supports JPG, PNG, and other image formats (Multiple selection enabled)</div>
            <input type="file" id="file-input" accept="image/*" multiple />
        </div>

        <div id="multi-image-preview" style="display: none;">
            <h3><i class="fas fa-images"></i> Selected Images:</h3>
            <div class="multi-image-container" id="multi-image-container"></div>
        </div>

        <div class="tabs">
            <div class="tab active" data-tab="ocr-settings">OCR Settings</div>
            <div class="tab" data-tab="image-editing">Image Editing</div>
            <div class="tab" data-tab="text-editing">Text Editing</div>
            <div class="tab" data-tab="translation">Translation</div>
        </div>

        <div class="tab-content active" id="ocr-settings">
            <div class="language-selector">
                <div>
                    <label class="option-label"><i class="fas fa-language"></i> OCR Language:</label>
                    <select id="ocr-language">
                        <option value="eng">English</option>
                        <option value="spa">Spanish</option>
                        <option value="fre">French</option>
                        <option value="deu">German</option>
                        <option value="ita">Italian</option>
                        <option value="por">Portuguese</option>
                        <option value="rus">Russian</option>
                        <option value="chi_sim">Chinese</option>
                        <option value="jpn">Japanese</option>
                    </select>
                </div>
                
                <div>
                    <label class="option-label"><i class="fas fa-bolt"></i> OCR Engine Mode:</label>
                    <select id="ocr-engine">
                        <option value="default">Default</option>
                        <option value="fast">Fast</option>
                        <option value="accurate">Accurate</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="tab-content" id="image-editing">
            <div class="image-controls">
                <button id="rotate-left"><i class="fas fa-undo"></i> Rotate Left</button>
                <button id="rotate-right"><i class="fas fa-redo"></i> Rotate Right</button>
                <button id="flip-horizontal"><i class="fas fa-arrows-alt-h"></i> Flip Horizontal</button>
                <button id="flip-vertical"><i class="fas fa-arrows-alt-v"></i> Flip Vertical</button>
                <button id="enhance-image"><i class="fas fa-magic"></i> Enhance Image</button>
                <button id="reset-image"><i class="fas fa-sync"></i> Reset</button>
            </div>
        </div>

        <div class="tab-content" id="text-editing">
            <div class="editor-toolbar">
                <button data-command="bold"><i class="fas fa-bold"></i></button>
                <button data-command="italic"><i class="fas fa-italic"></i></button>
                <button data-command="underline"><i class="fas fa-underline"></i></button>
                <button data-command="insertOrderedList"><i class="fas fa-list-ol"></i></button>
                <button data-command="insertUnorderedList"><i class="fas fa-list-ul"></i></button>
                <button data-command="outdent"><i class="fas fa-outdent"></i></button>
                <button data-command="indent"><i class="fas fa-indent"></i></button>
                <button data-command="justifyLeft"><i class="fas fa-align-left"></i></button>
                <button data-command="justifyCenter"><i class="fas fa-align-center"></i></button>
                <button data-command="justifyRight"><i class="fas fa-align-right"></i></button>
            </div>
        </div>

        <div class="tab-content" id="translation">
            <div class="language-selector">
                <div>
                    <label class="option-label"><i class="fas fa-language"></i> Translate to:</label>
                    <select id="target-language">
                        <option value="en">English</option>
                        <option value="es">Spanish</option>
                        <option value="fr">French</option>
                        <option value="de">German</option>
                        <option value="it">Italian</option>
                        <option value="pt">Portuguese</option>
                        <option value="ru">Russian</option>
                        <option value="zh">Chinese</option>
                        <option value="ja">Japanese</option>
                    </select>
                </div>
            </div>
            <button class="btn" id="detect-language-btn">
                <i class="fas fa-search"></i> Detect Language
            </button>
            <div class="language-detection" id="language-detection" style="display: none;">
                <span class="language-flag" id="detected-language-flag">🌐</span>
                <span id="detected-language-text">Detected language: </span>
            </div>
        </div>

        <button class="btn" id="extract-btn" disabled>
            <i class="fas fa-qrcode"></i> Extract Text from Images
        </button>

        <button class="btn btn-secondary" id="clear-btn">
            <i class="fas fa-trash"></i> Clear All
        </button>

        <div class="loading" id="loading">
            <div class="loading-spinner"></div>
            <p>Processing your images...</p>
            <div class="progress-bar">
                <div class="progress" id="progress-bar"></div>
            </div>
            <p id="progress-text">0%</p>
        </div>

        <div class="status-indicator">
            <div class="status-dot" id="status-dot"></div>
            <span id="status-text">Select images to begin</span>
        </div>

        <div id="uploaded-images" style="display: none; margin-top: 20px;">
            <h3><i class="fas fa-images"></i> Selected Image:</h3>
            <div class="image-preview-container">
                <div class="image-preview">
                    <img id="main-preview" src="" alt="Preview">
                </div>
                <div>
                    <div class="image-controls" style="margin-top: 15px;">
                        <button id="brightness-down"><i class="fas fa-brightness"></i> Darker</button>
                        <button id="brightness-up"><i class="fas fa-sun"></i> Brighter</button>
                        <button id="contrast-down"><i class="fas fa-adjust"></i> Less Contrast</button>
                        <button id="contrast-up"><i class="fas fa-adjust"></i> More Contrast</button>
                    </div>
                </div>
            </div>
        </div>

        <div id="result-container" style="display: none;">
            <h2><i class="fas fa-file-alt"></i> Extracted Text:</h2>
            
            <div class="text-stats">
                <div class="stat">
                    <i class="fas fa-font"></i>
                    <span id="char-count">0 characters</span>
                </div>
                <div class="stat">
                    <i class="fas fa-text-width"></i>
                    <span id="word-count">0 words</span>
                </div>
                <div class="stat">
                    <i class="fas fa-clock"></i>
                    <span id="read-time">0 min read</span>
                </div>
            </div>
            
            <div class="text-editor" id="text-output" contenteditable="true" placeholder="Extracted text will appear here..."></div>

            <div class="tts-controls">
                <label for="voice-select"><i class="fas fa-microphone"></i> Voice:</label>
                <select id="voice-select"></select>
                
                <label for="rate"><i class="fas fa-tachometer-alt"></i> Speed:</label>
                <input type="range" id="rate" min="0.5" max="2" value="1" step="0.1" style="width: 100px;">
                <span id="rate-value">1</span>
                
                <label for="pitch"><i class="fas fa-wave-square"></i> Pitch:</label>
                <input type="range" id="pitch" min="0.5" max="2" value="1" step="0.1" style="width: 100px;">
                <span id="pitch-value">1</span>
            </div>

            <div class="action-buttons">
                <button class="btn" id="speak-btn">
                    <i class="fas fa-play"></i> Speak Text
                </button>
                <button class="btn btn-warning" id="pause-btn" style="display: none;">
                    <i class="fas fa-pause"></i> Pause
                </button>
                <button class="btn btn-secondary" id="resume-btn" style="display: none;">
                    <i class="fas fa-play"></i> Resume
                </button>
                <button class="btn btn-danger" id="stop-btn">
                    <i class="fas fa-stop"></i> Stop
                </button>
                <button class="btn btn-secondary" id="copy-btn">
                    <i class="fas fa-copy"></i> Copy Text
                </button>
                <button class="btn btn-secondary" id="download-btn">
                    <i class="fas fa-download"></i> Download Text
                </button>
                <button class="btn btn-secondary" id="translate-btn">
                    <i class="fas fa-globe"></i> Translate
                </button>
                <button class="btn btn-secondary" id="save-btn">
                    <i class="fas fa-save"></i> Save to History
                </button>
            </div>
        </div>

        <div class="translation-container" id="translation-container">
            <h3><i class="fas fa-language"></i> Translated Text:</h3>
            <div class="translation-result" id="translation-result"></div>
            <div class="action-buttons" style="margin-top: 15px;">
                <button class="btn btn-secondary" id="copy-translation-btn">
                    <i class="fas fa-copy"></i> Copy Translation
                </button>
            </div>
        </div>

        <div class="history-section" id="history-section" style="display: none;">
            <h3><i class="fas fa-history"></i> Extraction History:</h3>
            <div class="history-list" id="history-list"></div>
        </div>
    </div>

    <div class="floating-buttons">
        <div class="floating-btn" id="scroll-top-btn">
            <i class="fas fa-arrow-up"></i>
        </div>
        <div class="floating-btn" id="help-btn">
            <i class="fas fa-question"></i>
        </div>
    </div>

    <div class="notification" id="notification">
        <i class="notification-icon" id="notification-icon"></i>
        <div id="notification-text"></div>
    </div>

    <script>
        // DOM Elements
        const fileInput = document.getElementById('file-input');
        const extractBtn = document.getElementById('extract-btn');
        const clearBtn = document.getElementById('clear-btn');
        const loading = document.getElementById('loading');
        const progressBar = document.getElementById('progress-bar');
        const progressText = document.getElementById('progress-text');
        const statusDot = document.getElementById('status-dot');
        const statusText = document.getElementById('status-text');
        const resultContainer = document.getElementById('result-container');
        const textOutput = document.getElementById('text-output');
        const speakBtn = document.getElementById('speak-btn');
        const pauseBtn = document.getElementById('pause-btn');
        const resumeBtn = document.getElementById('resume-btn');
        const stopBtn = document.getElementById('stop-btn');
        const copyBtn = document.getElementById('copy-btn');
        const downloadBtn = document.getElementById('download-btn');
        const translateBtn = document.getElementById('translate-btn');
        const saveBtn = document.getElementById('save-btn');
        const notification = document.getElementById('notification');
        const notificationIcon = document.getElementById('notification-icon');
        const notificationText = document.getElementById('notification-text');
        const languageSelect = document.getElementById('ocr-language');
        const uploadedImagesContainer = document.getElementById('uploaded-images');
        const mainPreview = document.getElementById('main-preview');
        const historySection = document.getElementById('history-section');
        const historyList = document.getElementById('history-list');
        const voiceSelect = document.getElementById('voice-select');
        const rateInput = document.getElementById('rate');
        const pitchInput = document.getElementById('pitch');
        const rateValue = document.getElementById('rate-value');
        const pitchValue = document.getElementById('pitch-value');
        const themeToggle = document.getElementById('theme-toggle');
        const charCount = document.getElementById('char-count');
        const wordCount = document.getElementById('word-count');
        const readTime = document.getElementById('read-time');
        const scrollTopBtn = document.getElementById('scroll-top-btn');
        const helpBtn = document.getElementById('help-btn');
        const tabs = document.querySelectorAll('.tab');
        const tabContents = document.querySelectorAll('.tab-content');
        const multiImagePreview = document.getElementById('multi-image-preview');
        const multiImageContainer = document.getElementById('multi-image-container');
        const targetLanguageSelect = document.getElementById('target-language');
        const detectLanguageBtn = document.getElementById('detect-language-btn');
        const languageDetection = document.getElementById('language-detection');
        const detectedLanguageFlag = document.getElementById('detected-language-flag');
        const detectedLanguageText = document.getElementById('detected-language-text');
        const translationContainer = document.getElementById('translation-container');
        const translationResult = document.getElementById('translation-result');
        const copyTranslationBtn = document.getElementById('copy-translation-btn');

        // Variables
        let currentFiles = [];
        let currentUtterance = null;
        let extractionHistory = [];
        let voices = [];
        let currentImageIndex = 0;
        let rotation = 0;
        let scaleX = 1;
        let scaleY = 1;
        let brightness = 100;
        let contrast = 100;
        let detectedLanguage = 'en';

        // Language to flag mapping
        const languageFlags = {
            'en': '🇺🇸', 'es': '🇪🇸', 'fr': '🇫🇷', 'de': '🇩🇪', 
            'it': '🇮🇹', 'pt': '🇵🇹', 'ru': '🇷🇺', 'zh': '🇨🇳', 'ja': '🇯🇵'
        };

        // Language code to name mapping
        const languageNames = {
            'en': 'English', 'es': 'Spanish', 'fr': 'French', 'de': 'German',
            'it': 'Italian', 'pt': 'Portuguese', 'ru': 'Russian', 
            'zh': 'Chinese', 'ja': 'Japanese'
        };

        // OCR language to translation language mapping
        const ocrToTranslationLang = {
            'eng': 'en', 'spa': 'es', 'fre': 'fr', 'deu': 'de',
            'ita': 'it', 'por': 'pt', 'rus': 'ru', 'chi_sim': 'zh', 'jpn': 'ja'
        };

        // Event Listeners
        fileInput.addEventListener('change', handleFileSelect);
        extractBtn.addEventListener('click', extractText);
        clearBtn.addEventListener('click', clearAll);
        speakBtn.addEventListener('click', speakText);
        pauseBtn.addEventListener('click', pauseSpeech);
        resumeBtn.addEventListener('click', resumeSpeech);
        stopBtn.addEventListener('click', stopSpeech);
        copyBtn.addEventListener('click', copyText);
        downloadBtn.addEventListener('click', downloadText);
        translateBtn.addEventListener('click', translateText);
        saveBtn.addEventListener('click', saveToHistory);
        rateInput.addEventListener('input', updateRateValue);
        pitchInput.addEventListener('input', updatePitchValue);
        themeToggle.addEventListener('click', toggleTheme);
        scrollTopBtn.addEventListener('click', scrollToTop);
        helpBtn.addEventListener('click', showHelp);
        detectLanguageBtn.addEventListener('click', detectLanguage);
        copyTranslationBtn.addEventListener('click', copyTranslation);

        // Image editing event listeners
        document.getElementById('rotate-left').addEventListener('click', () => rotateImage(-90));
        document.getElementById('rotate-right').addEventListener('click', () => rotateImage(90));
        document.getElementById('flip-horizontal').addEventListener('click', () => flipImage('horizontal'));
        document.getElementById('flip-vertical').addEventListener('click', () => flipImage('vertical'));
        document.getElementById('enhance-image').addEventListener('click', enhanceImage);
        document.getElementById('reset-image').addEventListener('click', resetImage);
        document.getElementById('brightness-up').addEventListener('click', () => adjustBrightness(10));
        document.getElementById('brightness-down').addEventListener('click', () => adjustBrightness(-10));
        document.getElementById('contrast-up').addEventListener('click', () => adjustContrast(10));
        document.getElementById('contrast-down').addEventListener('click', () => adjustContrast(-10));

        // Text editor toolbar
        document.querySelectorAll('.editor-toolbar button').forEach(button => {
            button.addEventListener('click', () => {
                const command = button.dataset.command;
                document.execCommand(command, false, null);
                updateTextStats();
            });
        });

        // Tab functionality
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const tabId = tab.dataset.tab;
                
                // Remove active class from all tabs and contents
                tabs.forEach(t => t.classList.remove('active'));
                tabContents.forEach(c => c.classList.remove('active'));
                
                // Add active class to current tab and content
                tab.classList.add('active');
                document.getElementById(tabId).classList.add('active');
            });
        });

        // Initialize
        loadVoices();
        loadHistory();
        // Chrome loads voices asynchronously
        if (speechSynthesis.onvoiceschanged !== undefined) {
            speechSynthesis.onvoiceschanged = loadVoices;
        }

        // Update text stats when text changes
        textOutput.addEventListener('input', updateTextStats);

        // Drag and drop functionality
        const uploadArea = document.getElementById('upload-area');
        
        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.style.borderColor = 'var(--primary)';
            uploadArea.style.backgroundColor = 'rgba(67, 97, 238, 0.05)';
        });

        uploadArea.addEventListener('dragleave', () => {
            uploadArea.style.borderColor = 'var(--border)';
            uploadArea.style.backgroundColor = 'rgba(67, 97, 238, 0.03)';
        });

        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.style.borderColor = 'var(--border)';
            uploadArea.style.backgroundColor = 'rgba(67, 97, 238, 0.03)';
            
            if (e.dataTransfer.files.length) {
                fileInput.files = e.dataTransfer.files;
                handleFileSelect({ target: fileInput });
            }
        });

        // Text-to-speech functions
        function loadVoices() {
            voices = speechSynthesis.getVoices();
            voiceSelect.innerHTML = '';
            
            voices.forEach((voice, i) => {
                const option = document.createElement('option');
                option.value = i;
                option.textContent = `${voice.name} (${voice.lang})`;
                if (voice.default) {
                    option.textContent += ' — DEFAULT';
                }
                voiceSelect.appendChild(option);
            });
        }

        function speakText() {
            const text = textOutput.innerText || textOutput.textContent;
            if (!text.trim()) {
                showNotification('No text to speak', 'error');
                return;
            }
            
            // Stop any ongoing speech
            stopSpeech();
            
            if ('speechSynthesis' in window) {
                currentUtterance = new SpeechSynthesisUtterance(text);
                
                // Set selected voice
                const selectedVoice = voices[voiceSelect.value];
                if (selectedVoice) {
                    currentUtterance.voice = selectedVoice;
                }
                
                // Set voice properties
                currentUtterance.rate = parseFloat(rateInput.value);
                currentUtterance.pitch = parseFloat(pitchInput.value);
                currentUtterance.volume = 1;
                
                // Event listeners for the utterance
                currentUtterance.onend = function() {
                    speakBtn.style.display = 'inline-flex';
                    pauseBtn.style.display = 'none';
                    resumeBtn.style.display = 'none';
                    stopBtn.style.display = 'none';
                };
                
                currentUtterance.onerror = function() {
                    showNotification('Error reading text', 'error');
                    speakBtn.style.display = 'inline-flex';
                    pauseBtn.style.display = 'none';
                    resumeBtn.style.display = 'none';
                    stopBtn.style.display = 'none';
                };
                
                // Speak the text
                window.speechSynthesis.speak(currentUtterance);
                
                // Update button visibility
                speakBtn.style.display = 'none';
                pauseBtn.style.display = 'inline-flex';
                resumeBtn.style.display = 'none';
                stopBtn.style.display = 'inline-flex';
                
                showNotification('Reading text aloud', 'success');
            } else {
                showNotification('Your browser does not support text-to-speech', 'error');
            }
        }

        function pauseSpeech() {
            if (window.speechSynthesis.speaking && !window.speechSynthesis.paused) {
                window.speechSynthesis.pause();
                pauseBtn.style.display = 'none';
                resumeBtn.style.display = 'inline-flex';
                showNotification('Speech paused', 'success');
            }
        }

        function resumeSpeech() {
            if (window.speechSynthesis.speaking && window.speechSynthesis.paused) {
                window.speechSynthesis.resume();
                pauseBtn.style.display = 'inline-flex';
                resumeBtn.style.display = 'none';
                showNotification('Speech resumed', 'success');
            }
        }

        function stopSpeech() {
            if (window.speechSynthesis.speaking) {
                window.speechSynthesis.cancel();
                speakBtn.style.display = 'inline-flex';
                pauseBtn.style.display = 'none';
                resumeBtn.style.display = 'none';
                stopBtn.style.display = 'none';
                showNotification('Speech stopped', 'success');
            }
        }

        function updateRateValue() {
            rateValue.textContent = rateInput.value;
        }

        function updatePitchValue() {
            pitchValue.textContent = pitchInput.value;
        }

        // File handling functions
        function handleFileSelect(e) {
            const files = Array.from(e.target.files);
            if (!files.length) return;

            // Filter only image files
            const imageFiles = files.filter(file => file.type.match('image.*'));
            
            if (imageFiles.length === 0) {
                showNotification('Please select image files only', 'error');
                return;
            }

            currentFiles = imageFiles;
            currentImageIndex = 0;
            
            // Update status
            statusDot.className = 'status-dot';
            statusText.textContent = `${imageFiles.length} image(s) selected`;
            
            // Enable extract button
            extractBtn.disabled = false;
            
            // Show uploaded images
            showMultiImagePreview();
            resetImageEditing();
            showMainPreview(0);
        }

        function showMultiImagePreview() {
            multiImageContainer.innerHTML = '';
            
            currentFiles.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const div = document.createElement('div');
                    div.className = 'multi-image-item';
                    if (index === currentImageIndex) {
                        div.classList.add('active');
                    }
                    
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.dataset.index = index;
                    
                    img.addEventListener('click', () => {
                        currentImageIndex = index;
                        showMainPreview(index);
                        document.querySelectorAll('.multi-image-item').forEach(item => {
                            item.classList.remove('active');
                        });
                        div.classList.add('active');
                    });
                    
                    const removeBtn = document.createElement('div');
                    removeBtn.className = 'multi-image-remove';
                    removeBtn.innerHTML = '×';
                    removeBtn.onclick = (event) => {
                        event.stopPropagation();
                        removeImage(index);
                    };
                    
                    div.appendChild(img);
                    div.appendChild(removeBtn);
                    multiImageContainer.appendChild(div);
                };
                reader.readAsDataURL(file);
            });
            
            multiImagePreview.style.display = 'block';
            uploadedImagesContainer.style.display = 'block';
        }

        function showMainPreview(index) {
            const file = currentFiles[index];
            const reader = new FileReader();
            reader.onload = function(e) {
                mainPreview.src = e.target.result;
            };
            reader.readAsDataURL(file);
        }

        function removeImage(index) {
            currentFiles.splice(index, 1);
            
            if (currentFiles.length === 0) {
                multiImagePreview.style.display = 'none';
                uploadedImagesContainer.style.display = 'none';
                extractBtn.disabled = true;
                statusText.textContent = 'Select images to begin';
            } else {
                if (currentImageIndex >= currentFiles.length) {
                    currentImageIndex = currentFiles.length - 1;
                }
                showMultiImagePreview();
                showMainPreview(currentImageIndex);
                statusText.textContent = `${currentFiles.length} image(s) selected`;
            }
        }

        // Image editing functions
        function rotateImage(degrees) {
            rotation = (rotation + degrees) % 360;
            applyImageTransforms();
        }

        function flipImage(direction) {
            if (direction === 'horizontal') {
                scaleX = -scaleX;
            } else {
                scaleY = -scaleY;
            }
            applyImageTransforms();
        }

        function adjustBrightness(value) {
            brightness = Math.max(0, Math.min(200, brightness + value));
            applyImageTransforms();
        }

        function adjustContrast(value) {
            contrast = Math.max(0, Math.min(200, contrast + value));
            applyImageTransforms();
        }

        function enhanceImage() {
            brightness = 130;
            contrast = 130;
            applyImageTransforms();
            showNotification('Image enhanced for better OCR results', 'success');
        }

        function resetImage() {
            rotation = 0;
            scaleX = 1;
            scaleY = 1;
            brightness = 100;
            contrast = 100;
            applyImageTransforms();
            showNotification('Image reset to original', 'success');
        }

        function applyImageTransforms() {
            mainPreview.style.transform = `rotate(${rotation}deg) scaleX(${scaleX}) scaleY(${scaleY})`;
            mainPreview.style.filter = `brightness(${brightness}%) contrast(${contrast}%)`;
        }

        function resetImageEditing() {
            rotation = 0;
            scaleX = 1;
            scaleY = 1;
            brightness = 100;
            contrast = 100;
        }

        // Language detection function
        function detectLanguage() {
            const text = textOutput.innerText || textOutput.textContent;
            if (!text.trim()) {
                showNotification('No text to detect language from', 'error');
                return;
            }
            
            // Simple language detection based on common words
            // This is a basic implementation - in a real app, you'd use a proper language detection library
            const languagePatterns = {
                'en': /\b(the|and|of|to|a|in|that|is|it|for)\b/gi,
                'es': /\b(el|la|de|que|y|a|en|un|ser|se)\b/gi,
                'fr': /\b(le|de|un|à|être|et|en|avoir|que|pour)\b/gi,
                'de': /\b(der|die|das|und|in|den|von|zu|das|mit)\b/gi,
                'it': /\b(il|e|di|che|in|una|a|per|sono|con)\b/gi,
                'pt': /\b(o|e|de|que|um|em|para|é|com|não)\b/gi,
                'ru': /\b(и|в|не|на|я|быть|с|что|а|по)\b/gi,
                'zh': /[的一是不了在人我有他这为之来以个中上们]/g,
                'ja': /[のにをはがでたしからなもることありましするれさっい]/g
            };
            
            let maxMatches = 0;
            let detectedLang = 'en';
            
            for (const [lang, pattern] of Object.entries(languagePatterns)) {
                const matches = (text.match(pattern) || []).length;
                if (matches > maxMatches) {
                    maxMatches = matches;
                    detectedLang = lang;
                }
            }
            
            detectedLanguage = detectedLang;
            detectedLanguageFlag.textContent = languageFlags[detectedLang] || '🌐';
            detectedLanguageText.textContent = `Detected language: ${languageNames[detectedLang] || 'Unknown'}`;
            languageDetection.style.display = 'flex';
            
            showNotification(`Language detected: ${languageNames[detectedLang]}`, 'success');
        }

        // Translation functions
        function translateText() {
            const text = textOutput.innerText || textOutput.textContent;
            if (!text.trim()) {
                showNotification('No text to translate', 'error');
                return;
            }
            
            const targetLang = targetLanguageSelect.value;
            
            // Show loading state
            translationResult.innerHTML = 'Translating...';
            translationContainer.style.display = 'block';
            
            // Use a translation API (mock implementation)
            // In a real application, you would use a proper translation API like Google Translate
            simulateTranslation(text, targetLang)
                .then(translatedText => {
                    translationResult.innerHTML = translatedText;
                    showNotification('Text translated successfully', 'success');
                })
                .catch(error => {
                    translationResult.innerHTML = 'Translation failed. Please try again.';
                    showNotification('Translation failed: ' + error.message, 'error');
                });
        }

        function simulateTranslation(text, targetLang) {
            return new Promise((resolve) => {
                // Simulate API delay
                setTimeout(() => {
                    // This is a mock translation - in a real app, you would call a translation API
                    const translations = {
                        'en': `[Translated to English] ${text}`,
                        'es': `[Traducido al español] ${text}`,
                        'fr': `[Traduit en français] ${text}`,
                        'de': `[Auf Deutsch übersetzt] ${text}`,
                        'it': `[Tradotto in italiano] ${text}`,
                        'pt': `[Traduzido para português] ${text}`,
                        'ru': `[Переведено на русский] ${text}`,
                        'zh': `[翻译成中文] ${text}`,
                        'ja': `[日本語に翻訳] ${text}`
                    };
                    
                    resolve(translations[targetLang] || text);
                }, 1500);
            });
        }

        function copyTranslation() {
            const text = translationResult.innerText || translationResult.textContent;
            if (!text.trim()) {
                showNotification('No translation to copy', 'error');
                return;
            }
            
            navigator.clipboard.writeText(text)
                .then(() => {
                    showNotification('Translation copied to clipboard', 'success');
                })
                .catch(err => {
                    showNotification('Failed to copy translation', 'error');
                    console.error('Failed to copy translation: ', err);
                });
        }

        // OCR functions
        function extractText() {
            if (!currentFiles.length) return;
            
            // Show loading state
            loading.style.display = 'block';
            extractBtn.disabled = true;
            statusDot.className = 'status-dot processing';
            statusText.textContent = 'Processing images...';
            
            // Get selected language
            const language = languageSelect.value;
            
            // Clear previous results
            textOutput.innerHTML = '';
            
            // Process all images
            const processPromises = currentFiles.map((file, index) => {
                return Tesseract.recognize(file, language, {
                    logger: message => {
                        if (message.status === 'recognizing text') {
                            const progress = Math.round(message.progress * 100);
                            progressBar.style.width = `${progress}%`;
                            progressText.textContent = `${progress}%`;
                        }
                    }
                }).then(({ data: { text } }) => {
                    return { text, file, index };
                });
            });
            
            // Wait for all images to be processed
            Promise.all(processPromises)
                .then(results => {
                    loading.style.display = 'none';
                    
                    // Combine all extracted text
                    const combinedText = results.map(result => result.text).join('\n\n');
                    
                    // Show success
                    statusDot.className = 'status-dot success';
                    statusText.textContent = 'Text extracted successfully from all images';
                    
                    // Display result
                    textOutput.innerHTML = combinedText;
                    resultContainer.style.display = 'block';
                    updateTextStats();
                    
                    // Auto-detect language
                    detectLanguage();
                    
                    // Add to history
                    addToHistory(results);
                    
                    showNotification('Text extracted successfully from all images', 'success');
                })
                .catch(error => {
                    loading.style.display = 'none';
                    statusDot.className = 'status-dot error';
                    statusText.textContent = 'Error: ' + error.message;
                    showNotification('Error: ' + error.message, 'error');
                    console.error('Error:', error);
                });
        }

        function addToHistory(results) {
            // Create a history entry
            const historyEntry = {
                id: Date.now(),
                timestamp: new Date().toLocaleString(),
                images: results.map(result => {
                    return {
                        text: result.text,
                        name: result.file.name
                    };
                }),
                combinedText: results.map(result => result.text).join('\n\n')
            };
            
            // Add to history array
            extractionHistory.unshift(historyEntry);
            
            // Keep only last 10 entries
            if (extractionHistory.length > 10) {
                extractionHistory.pop();
            }
            
            // Save to localStorage
            localStorage.setItem('ocrHistory', JSON.stringify(extractionHistory));
            
            // Update history UI
            updateHistoryUI();
        }

        function loadHistory() {
            const savedHistory = localStorage.getItem('ocrHistory');
            if (savedHistory) {
                extractionHistory = JSON.parse(savedHistory);
                updateHistoryUI();
            }
        }

        function updateHistoryUI() {
            if (extractionHistory.length === 0) {
                historySection.style.display = 'none';
                return;
            }
            
            historySection.style.display = 'block';
            historyList.innerHTML = '';
            
            extractionHistory.forEach(entry => {
                const item = document.createElement('div');
                item.className = 'history-item';
                
                // Use the first image text as preview
                const firstImage = entry.images[0];
                
                item.innerHTML = `
                    <h4>${entry.timestamp}</h4>
                    <p>${firstImage.text.substring(0, 150)}${firstImage.text.length > 150 ? '...' : ''}</p>
                    <div class="history-meta">
                        <span>${entry.images.length} image(s)</span>
                        <span>${firstImage.name}</span>
                    </div>
                `;
                
                item.addEventListener('click', () => {
                    textOutput.innerHTML = entry.combinedText;
                    resultContainer.style.display = 'block';
                    updateTextStats();
                    showNotification('Text loaded from history', 'success');
                });
                
                historyList.appendChild(item);
            });
        }

        function saveToHistory() {
            const text = textOutput.innerText || textOutput.textContent;
            if (!text.trim()) {
                showNotification('No text to save', 'error');
                return;
            }
            
            const historyEntry = {
                id: Date.now(),
                timestamp: new Date().toLocaleString(),
                images: [{
                    text: text,
                    name: 'Edited text'
                }],
                combinedText: text
            };
            
            extractionHistory.unshift(historyEntry);
            
            // Keep only last 10 entries
            if (extractionHistory.length > 10) {
                extractionHistory.pop();
            }
            
            // Save to localStorage
            localStorage.setItem('ocrHistory', JSON.stringify(extractionHistory));
            
            // Update history UI
            updateHistoryUI();
            
            showNotification('Text saved to history', 'success');
        }

        // Text utility functions
        function copyText() {
            const text = textOutput.innerText || textOutput.textContent;
            if (!text.trim()) {
                showNotification('No text to copy', 'error');
                return;
            }
            
            navigator.clipboard.writeText(text)
                .then(() => {
                    showNotification('Text copied to clipboard', 'success');
                })
                .catch(err => {
                    showNotification('Failed to copy text', 'error');
                    console.error('Failed to copy text: ', err);
                });
        }

        function downloadText() {
            const text = textOutput.innerText || textOutput.textContent;
            if (!text.trim()) {
                showNotification('No text to download', 'error');
                return;
            }
            
            const blob = new Blob([text], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'extracted-text.txt';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            showNotification('Text downloaded', 'success');
        }

        function updateTextStats() {
            const text = textOutput.innerText || textOutput.textContent;
            const characters = text.length;
            const words = text.trim() ? text.trim().split(/\s+/).length : 0;
            const readTimeMin = Math.ceil(words / 200);
            
            charCount.textContent = `${characters} characters`;
            wordCount.textContent = `${words} words`;
            readTime.textContent = `${readTimeMin} min read`;
        }

        // UI utility functions
        function clearAll() {
            currentFiles = [];
            fileInput.value = '';
            textOutput.innerHTML = '';
            resultContainer.style.display = 'none';
            multiImagePreview.style.display = 'none';
            uploadedImagesContainer.style.display = 'none';
            translationContainer.style.display = 'none';
            languageDetection.style.display = 'none';
            extractBtn.disabled = true;
            statusDot.className = 'status-dot';
            statusText.textContent = 'Select images to begin';
            stopSpeech();
            
            showNotification('All cleared', 'success');
        }

        function showNotification(message, type) {
            notificationText.textContent = message;
            notification.className = `notification ${type}`;
            
            if (type === 'success') {
                notificationIcon.className = 'notification-icon fas fa-check-circle';
            } else {
                notificationIcon.className = 'notification-icon fas fa-exclamation-circle';
            }
            
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }

        function toggleTheme() {
            document.body.classList.toggle('dark-mode');
            if (document.body.classList.contains('dark-mode')) {
                themeToggle.innerHTML = '<i class="fas fa-sun"></i> Light Mode';
            } else {
                themeToggle.innerHTML = '<i class="fas fa-moon"></i> Dark Mode';
            }
        }

        function scrollToTop() {
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        function showHelp() {
            showNotification('Drag and drop images to extract text. Use the editing tools to improve OCR accuracy.', 'success');
        }

        // Initialize text stats
        updateTextStats();
    </script>
</body>
</html>







Static Page : 


Types of Neurodevelopmental disorders: 
Intellectual Disability (ID) 
Autism Spectrum Disorder (ASD)
Attention-Deficit/Hyperactivity Disorder(ADHD)
Specific Learning Disorders (SLD)
Communication Disorders
 Developmental Coordination Disorder



















Name of the Neurodevelopment Disorder :- Intellectual Disability (ID) 

Information :- An intellectual disability is when limitations in your mental abilities affect intelligence, learning and everyday life skills. The effects of this can vary widely. Some people may experience minor effects but still live independent lives. Others may have severe effects and need lifelong assistance and support.  According to the DSM-5, intellectual functions include reasoning, problem solving, planning, abstract thinking, judgment, academic learning, and learning from experience. Deficits in these functions must be confirmed by clinical evaluation and individualized standard IQ testing. On the other hand, adaptive behaviors include the social, developmental, and practical skills people learn to perform tasks in their everyday lives.[8] Deficits in adaptive functioning often compromise an individual's independence and ability to meet their social responsibility

Symptoms :- 
Sitting up, crawling, or walking later than other children of similar age
Learning to talk later or having difficulty speaking
Finding it hard to remember things
Having trouble understanding the rules of social behavior
Having difficulty "seeing" or understanding the outcomes of actions
Population in India :- Intellectual disability (ID) prevalence in India varies across studies but falls within a general range, with some meta-analyses suggesting a lifetime prevalence of 1.4% to 3.2%. More specific research indicates an estimated 1.05% (10.5 per 1,000), with ID being substantially under-reported, especially among females, likely due to social stigma. Causes include childhood illnesses, head injuries, and pregnancy/birth complications, with under-reporting contributing to discrepancies in figures.  


People who get support for the Intellectual Disorder  :- 
People with intellectual disability may not be able to make informed choices about their own healthcare or other major life decisions. They may need support from parental figures, loved ones or other caregivers throughout their lifetime.

Testings Required :- 
Laboratory testing of blood, urine and more. These can identify underlying causes of intellectual disability or related conditions.
Genetic counseling. Identifying genetic conditions that are causing or contributing to intellectual disabilities can help prevent or limit complications related to these underlying conditions.
Imaging tests. These are especially helpful with identifying conditions that involve differences in brain structure, such as cephalic disorders.

Things that help these people :- 
Participation in enjoyable activities is instrumental to improving individuals’ quality of life. Previous studies have indicated engagement in community-based activities and physical exercise are beneficial to individuals with intellectual disabilities (ID). The purpose of this study was to understand, from their perceptions, fun activities in which individuals with ID engaged. One hundred and sixty-nine participants with ID provided 561 responses, which described what they do for fun. A multidisciplinary research team utilized a Consensual Qualitative Research (CQR) approach to differentiate responses into a list of categories that fit into six central domains. Domains (with frequency of responses) included: Community and Relationship Building Activities (130), Sports and Other Physical Activities (123), Technology and Gaming (105), Music and Other Preforming Arts (69), Mentally-Stimulating Activities (51), and Categories Outside of a Domain (82). These findings indicate that individuals with ID have a variety of interests.
Support Provided By Government :- 
DISHA - Early Intervention and School Readiness Scheme - This is an early intervention and school readiness scheme for children upto 10 years with the disabilities covered under the National Trust Act.
VIKAAS - Day Care - A day care scheme for persons with autism, cerebral palsy, mental retardation and multiple disabilities, above 10 years for enhancing interpersonal and vocational skills.
SAMARTH - Respite Care - TA scheme to provide respite home for orphans, families in crisis, Persons with Disabilities (PwD) from BPL, LIG families with at least one of the four disabilities covered under the National Trust Act.
GHARAUNDA - Group Home for Adults - This scheme provides housing and care services throughout the life of the person with Autism, Cerebral Palsy, Mental Retardation and Multiple Disabilities.
NIRAMAYA - Health Insurance Scheme - This scheme is to provide affordable Health Insurance to persons with Autism, Cerebral Palsy, Mental Retardation and Multiple Disabilities.
Name of the Neurodevelopment Disorder :- Autism Spectrum Disorder (ASD)

Information :- Autism spectrum disorder is a condition related to brain development that affects how people see others and socialize with them. This causes problems in communication and getting along with others socially. The condition also includes limited and repeated patterns of behavior. The term "spectrum" in autism spectrum disorder refers to the wide range of symptoms and the severity of these symptoms.
Autism spectrum disorder includes conditions that were once thought to be separate — autism, Asperger's syndrome, childhood disintegrative disorder and a form of widespread developmental disorder that isn't specified. Autism spectrum disorder begins in early childhood. Over time, it can cause difficulty functioning in society. For example, people with autism spectrum disorder may have problems being social or when in school or at work.
Symptoms :- 
Don't respond to their name, or they don't seem to hear at times.
Don't want to be cuddled or held and prefer to play alone, retreating into their own worlds.
Have poor eye contact and have no expression on their faces.
Don't speak or have delayed speech or lose the ability to say words or sentences as they could before.
Can't start a conversation or keep one going, or only start one to make requests or label items.
Population in India :- 
The prevalence of Autism in India has been steadily increasing. According to a 2021 study published in the Indian Journal of Pediatrics:
The estimated prevalence of Autism in India is around 1 in 68 children.
Boys are more commonly affected by Autism than girls, with a male-to-female ratio of approximately 3:1.
People who get support for the Autism Spectrum Disorder (ASD) :- Telling people close to you about your or your child's autism diagnosis can help them understand how to support you.
They may be able to help with everyday things so you have more time to focus on yourself or your child emotional support
Testings Required :- 
In-depth interviews: Specialists will talk with parents and caregivers about the child's developmental history, behaviors, and social interactions.
Direct observation: The specialist will observe the child in different settings to see how they interact with others and engage in play.
Standardized tests: There are specific diagnostic tools designed to assess a person's social communication skills, repetitive behaviors, and other characteristics associated with ASD.
Ruling out other conditions: The evaluation also helps to rule out other medical conditions that might cause similar symptoms, such as hearing issues or other developmental delays.

Things that help these people :- 
Many people with ASD experience sensory sensitivities, so activities that provide a calming or stimulating sensory experience can be very helpful.
Tactile Activities: These involve exploring different textures.
Sensory bins: Fill a bin with materials like sand, rice, water beads, or kinetic sand. Add small toys or scoops to encourage exploration.
Therapeutic arts and crafts: Activities like finger painting, working with clay or dough (e.g., Play-Doh), or making slime can be very satisfying.
Gardening: Handling soil and plants can be a grounding and rewarding experience.
Support Provided By Government :- 
1. Niramaya Health Insurance Scheme: 
2. Samarth Scheme: 
3. National Trust Act for Disabled Adults: 




















Name of the Neurodevelopment Disorder :- Attention-Deficit/Hyperactivity Disorder(ADHD)

Information :- ADHD (attention-deficit/hyperactivity disorder) is a condition that affects how your brain works. Despite its name, ADHD doesn’t mean that you lack attention. It means that it’s harder for you to control your attention or direct it to certain tasks. ADHD causes symptoms like difficulty focusing, trouble sitting still and impulsive behaviors. But it also allows you to “get in the zone” and hyperfocus on things you really enjoy.

Symptoms :- 
Avoids tasks that require focusing for a long time
Doesn’t pay attention to details or makes seemingly careless mistakes
Forgets to do things they’re supposed to
Gets easily distracted by things going on around them, or sometimes their own thoughts
Has difficulty with organizing things, like toys in their room, supplies in their backpack or steps in a project
Population in India :- 
The prevalence of ADHD among schoolchildren in middle-income countries, such as India, is sufficiently high to impose a significant societal burden. Therefore, it is imperative that all elementary school teachers receive training on how to screen for indicators of ADHD. The prevalence of ADHD in this study was 9.57% (67 out of 700), with a mean age of 8.9 years. ADHD was more prevalent in boys than in girls, with a sex ratio of 3:1. The combined type of ADHD was the most common (52.3%), followed by the attention deficit type (29.8%) and the hyperactive-impulsive type (17.9%).

People who get support for the Attention-Deficit/Hyperactivity Disorder(ADHD) :- Therapy for children and teens requires parents to play an active role. Treatment sessions with the child alone are more likely to be effective for treating symptoms of anxiety or depression that may co-occur with ADHD than for managing core symptoms of the disorder.
Mental health professionals can educate parents about the disorder and how it affects a family. They also can help parents develop new skills, attitudes, and ways of relating to their child. Examples include parenting skills training, stress management techniques for parents, and support groups that help parents and families connect with others who have similar concerns.
Testings Required :- It can be hard to diagnose ADHD, especially in children. No one test will spot it. Doctors diagnose ADHD in children and teens after discussing symptoms at length with the child, parents, and teachers and then observing the child's behaviors. 
Doctors use the American Psychiatric Association’s guidelines, which are based on how many symptoms you or your child has and for how long. They’ll also rule out other things that may be causing the symptoms, such as mental health conditions like depression and anxiety. Conditions like thyroid disorders can also cause similar symptoms. 
You health care provider might recommend your child take a series of tests to see how their brain works and to rule out problems with vision, hearing, or other problems related to the senses, which can cause symptoms similar to ADHD. The tests should be given by a pediatrician or mental health professional with experience in diagnosing and treating ADHD. The tests may include:
A physical exam and neurological assessment that includes screenings of vision, hearing, and verbal and motor skills
An evaluation of intelligence, aptitude, personality traits, or processing skills
Things that help these people :- 
1. Modeling play dough or clay: Make homemade play dough or use store-bought to create shapes and promote imagination.
2. Shaping kinetic sand: Set up a table with kinetic sand for building or molding.
3. Finger painting: Provide different colors and papers to create artwork.
4. Exploring sensory bins: Fill tubs with items of different colors, shapes, and textures for children to explore.
5. Playing with water: Fill the bathtub or an outside bin for children to play with toys or water-based markers in.
Support Provided By Government :- 
Most children with ADHD receive some school services, such as special education services and accommodations. There are two laws that govern special services and accommodations for children with disabilities:
The Individuals with Disabilities Education Act (IDEA)
Section 504 of the Rehabilitation Act of 1973






























Name of the Neurodevelopment Disorder :- Specific Learning Disorders (SLD)

Information :- Specific Learning Disabilities (SLDs), commonly referred to as learning disabilities (LD), are brain-based disorders that affect an individual’s capacity to excel in specific academic areas. These disabilities manifest differently but primarily affect reading, writing, and mathematical skills. Here are some of the most common but not all LDs:
Dyslexia is a well-known learning disability that primarily impacts reading. People with dyslexia struggle to recognize and blend sounds in words, read fluently, and spell accurately. These difficulties persist despite having access to adequate instruction, making fluent reading a struggle.
Dysgraphia is a learning disability associated with writing. Individuals with dysgraphia may make grammar and spelling mistakes, produce writing that lacks structure and clarity, and find it challenging to form letters neatly. This condition can hinder effective communication through written expression. 
Dyscalculia is a learning disability that affects an individual’s mathematical skills. It can hinder basic calculations and present challenges in solving complex math problems, such as word problems and multi-step mathematical tasks.

Symptoms :- 
Persistent difficulties in reading, writing, arithmetic, or mathematical reasoning
Inaccurate or slow and effortful reading or writing
Poor written expression that lacks clarity
Difficulties remembering number facts
Inaccurate mathematical reasoning
Population in India :- 
The six studies of this systematic review have included the diagnostic screening of 8133 children. The random-effects meta-analysis showed that the overall pooled prevalence of SLD in India was 8% (95% CI = 4–11). In this meta-analysis, a high level of heterogeneity (98.72%) was observed between the studies. The diamond in the result represents the point estimate of 7.7% from all the individual studies together. The horizontal point of the diamond represents the 95% confidence interval of this combined point estimate.
People who get support for the Specific Learning Disorders (SLD) :- 
Teach students to self-monitor. Students can be taught to assess their own work. ...
Provide opportunities for peer tutoring. Consider approaches for incorporating group work into learning. ...
Actively use and teach meta-cognitive strategies.

Testings Required :- 
The prognosis of SLD is mixed as it really depends on a number of factors, like the age of diagnosis and comorbidity of conditions: Generally, the earlier the diagnosis for SLD, the better the prognosis. Early diagnosis allows for early intervention. It’s been found that there is a brief window of opportunity for successful intervention, which is before the age of 8. Many who receive early intervention are actually able to do well academically and go on to pursue higher education.The presence of comorbidity means that people can experience different symptoms and with varying degrees of severity. Predictions are hard to make. If there is comorbidity, it can be more challenging to predict the prognosis. Besides, a supportive family environment makes a big difference. Being encouraging and learning to celebrate small successes helps these individuals build positive self-image and increase willingness to commit to learning despite challenges. Remind yourself that these difficulties are unintentional, recognise their efforts and offer whatever support possible, be it practical or emotional. It’ll go a long way in helping them on their learning journey.
Things that help these people :- 
Break learning tasks into small steps.
Probe regularly to check understanding.
Provide regular quality feedback.
Present information visually and verbally.
Use diagrams, graphics and pictures to support instruction.
Provide independent practice.
Model what you want students to do.
Support Provided By Government :- 
Through Samagra Shiksha support is provided to 10.18 lakh government schools (UDISE+ 23-24) for conducting continuous professional development programs for teachers and educators, awareness and sensitization programs for parents to build awareness and skills for supporting CwSN and distribution of inclusive Teaching Learning Material (TLM) for CwSN including those with SLD. The scheme supports the creation and use of multi-sensory, activity-based, and easily accessible learning tools tailored to the individual needs of dyslexic students. This includes the provision of large print books, phonics-based reading material, audio books, visual aids, and digital learning content. Concurrently, through Samagra Shiksha, teachers are trained and funded to develop low-cost, locally relevant TLM, with platforms such as DIKSHA facilitating the use of assistive technologies. 























Name of the Neurodevelopment Disorder :- Communication Disorders

Information :- Communication disorders are a group of conditions involving problems with receiving, processing, sending, and comprehending various forms of information and communication, including: concepts,verbal,nonverbal,graphic language,speech. They can result from any condition that affects hearing, speech, and language to the extent that it can disrupt a person’s ability to communicate properly. A communication disorder can manifest early in a child’s development, or a medical condition can cause it to develop at an older age.

Symptoms :-
repeating words, vowels, or sounds
difficulty making sounds, even when the person knows what they want to say
difficulty learning new words
problems using words and forming sentences to explain or describe
being behind their peers in terms of oral communication
Population in India :- India's population with communication disorders is significant, with an estimated over 5 million people affected. However, official figures, like those from the 2011 census (which showed 18.9% with hearing impairment and 7.45% with speech impairment within the disabled population), likely underestimate the true prevalence due to limited health infrastructure, lack of awareness, and underreporting. Studies indicate that hearing disorders are more prevalent than speech and language disorders in India. 
People who get support for the Communication Disorder :- 
Professional support is essential for children with communication disorders. Speech-language pathologists (SLPs) play a key role in diagnosing and treating these disorders. SLPs use various techniques to improve speech clarity, language comprehension, and social communication. They also work closely with parents and educators to create individualized therapy plans​. In schools, children may qualify for services under the Individuals with Disabilities Education Act (IDEA). This law ensures that children with speech and language impairments receive the support they need in an educational setting. Collaborating with special education teachers, occupational therapists, and other professionals can further enhance the child's development​.

Testings Required :- 
A doctor will need to perform a physical exam to diagnose communication disorders. This exam will involve examining a person’s mouth, ears, and nose. If the doctor suspects a communication disorder, they will work with other specialists, such as neurologists and speech-language pathologists, to make an accurate diagnosis.
Common tests include:
Hearing tests
Neurological exam
Nasopharyngolaryngoscopy, which uses a flexible fiber-optic tube with a camera to view the voice box
Psychometric testing to assess thinking performance and logical reasoning abilities
Psychological testing to assess cognitive abilities
Things that help these people :- Reading, sorting games, and toy play are examples of activities that fit in well with everyday life and offer steady chances for development. Combining engaging, interactive activities with expert advice increases the likelihood that kids will remain engaged and acquire critical communication skills.

Support Provided by Government :- 
ADIP Scheme:
Provides financial assistance for the purchase of aids and appliances, including those for speech and hearing impairments.
NIDCD Funding (US):
Supports research and development of assistive devices like personalized text-to-
speech synthesis systems and brain-computer interfaces for people with communication disorders.










Name of the Neurodevelopment Disorder :- Developmental Coordination Disorder

Information :- Developmental coordination disorder (DCD) is a neurodevelopmental disorder that affects children's ability to execute coordinated motor actions, resulting in slow, clumsy, or inaccurate motor performances and learning difficulties (of new motor tasks or to adapt previously learned gestures to a modified or additional constraint). In the course of development, children with DCD exhibit a diversity of motor signs, including fine and gross motor problems with impaired postural control and balance, and sensorimotor coordination or motor learning difficulties.

Symptoms :- 
Shows unusual body positions (postures) during their 1st year
Has difficulty playing with toys that involve good co-ordination, such as stacking bricks
Has some difficulty learning to eat with cutlery
Population in India :- While official statistics are often underestimated, India's government reported over 5 million people suffer from communication disabilities, with some estimates suggesting the actual number could be much higher due to the underreporting of conditions in official censuses. Communication disorders encompass issues with hearing, speech, and language, with studies finding prevalence rates ranging from 4% to over 6% in specific rural populations, though data is scarce and inconsistent across studies. 
People who get support for the Developmental Coordination Disorder :- There's no cure for DCD, but a number of therapies can help children to manage their problems.
These include being taught ways to do activities they find difficult, such as breaking down difficult movements into smaller parts and practicing them regularly adapting tasks to make them easier, such as using special grips on pens and pencils so they are easier to hold.
Testings Required :- 
Learning and execution of coordinated motor skills is below age level given the child's opportunity for skill learning
Motor difficulties significantly interfere with activities of daily living, academic productivity, prevocational and vocational activities, leisure and play
Onset is in the early developmental period
Motor coordination difficulties are not better explained by intellectual delay, visual impairment, or other neurological conditions that affect movement.
Things that help these people :- Health professionals can help children and adolescents with DCD increase their physical activity levels and develop behaviors that will help them remain physically active throughout their lives by encouraging them to participate in activities that they enjoy and that do not require much hand-eye coordination or the ability to focus their attention. These activities include hiking, running, biking, skating, swimming, yoga, aerobic exercise, and some types of martial arts such as tai chi.

Support Provided By Government :- 
Samagra Shiksha
Financial Assistance for Persons with Special Needs (Disability Pension)
Sugamya Sahayak Scheme 
Deendayal Disabled Rehabilitation Scheme (DDRS) 
Integrated Education for Disabled Children / Integrated Education of Disabled in Secondary Stage (IEDSS)




